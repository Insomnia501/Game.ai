"use strict";(()=>{var e={};e.id=420,e.ids=[420],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},8893:e=>{e.exports=require("buffer")},1764:e=>{e.exports=require("util")},61:(e,o,n)=>{n.r(o),n.d(o,{originalPathname:()=>w,patchFetch:()=>m,requestAsyncStorage:()=>u,routeModule:()=>h,serverHooks:()=>v,staticGenerationAsyncStorage:()=>p});var t={};n.r(t),n.d(t,{GET:()=>d,OPTIONS:()=>g});var a=n(9303),i=n(8716),r=n(670),s=n(7070),c=n(5029),l=n(9544);async function d(e){try{let o=e.nextUrl.searchParams.get("userAddress");if(!o)return console.warn("[Dividend Balance API] 缺少必需参数: userAddress"),s.NextResponse.json({success:!1,error:"Missing required parameter: userAddress"},{status:400});if(!(0,c.At)(o))return console.warn("[Dividend Balance API] 无效的钱包地址:",o),s.NextResponse.json({success:!1,error:"Invalid user address format"},{status:400});let n=(0,c.f0)(o);console.log("[Dividend Balance API] 查询分红信息，用户地址:",n);let t=process.env.GAME_DIVIDEND_POOL_ADDRESS;if(!t)return console.error("[Dividend Balance API] GAME_DIVIDEND_POOL_ADDRESS 未配置"),s.NextResponse.json({success:!1,error:"Dividend pool address not configured"},{status:500});let a=(0,l.G4)();console.log("[Dividend Balance API] 查询用户分红信息...");let i=await a.getUserDividendInfo(t,n);console.log("[Dividend Balance API] 查询分红池统计...");let r=await a.getDividendPoolStats(t),d=i.pending,g=i.claimed,h=i.gameBalance,u=(BigInt(d)+BigInt(g)).toString();return console.log("[Dividend Balance API] 数据格式化完成"),s.NextResponse.json({success:!0,userAddress:n,dividend:{pending:{wei:d,virtual:(0,l.mb)(d,18)},claimed:{wei:g,virtual:(0,l.mb)(g,18)},gameBalance:{wei:h,game:(0,l.mb)(h,18)},totalEarnable:{wei:u,virtual:(0,l.mb)(u,18)}},poolStats:{totalDividendPool:r.totalDividendPool,totalClaimed:r.totalClaimed,totalPending:r.totalPending,totalDividendPerShare:r.totalDividendPerShare},timestamp:Date.now()},{status:200})}catch(e){return console.error("[Dividend Balance API] 处理请求失败:",e),s.NextResponse.json({success:!1,error:"Failed to query dividend balance",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}async function g(){return new s.NextResponse(null,{status:200,headers:{"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, OPTIONS","Access-Control-Allow-Headers":"Content-Type, Authorization"}})}let h=new a.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/dividend/balance/route",pathname:"/api/dividend/balance",filename:"route",bundlePath:"app/api/dividend/balance/route"},resolvedPagePath:"/Users/daniel/Code/10_project/Game/server/app/api/dividend/balance/route.ts",nextConfigOutput:"",userland:t}),{requestAsyncStorage:u,staticGenerationAsyncStorage:p,serverHooks:v}=h,w="/api/dividend/balance/route";function m(){return(0,r.patchFetch)({serverHooks:v,staticGenerationAsyncStorage:p})}},5029:(e,o,n)=>{function t(e){return/^0x[a-fA-F0-9]{40}$/.test(e)}function a(e){if(!t(e))throw Error("Invalid address format");return e.toLowerCase()}n.d(o,{At:()=>t,f0:()=>a})},9544:(e,o,n)=>{n.d(o,{G4:()=>u,mb:()=>v,r0:()=>p});var t=n(7856),a=n(8165),i=n(6772),r=n(7618),s=n(2458),c=n(6103),l=n(5392);let d=["function transfer(address to, uint256 amount) public returns (bool)","function balanceOf(address account) public view returns (uint256)","function approve(address spender, uint256 amount) public returns (bool)","function allowance(address owner, address spender) public view returns (uint256)"],g=["function depositDividend(uint256 amount) external","function claimDividend() external nonReentrant returns (uint256 claimable)","function getPendingDividend(address user) external view returns (uint256)","function getUserDividendInfo(address user) external view returns (uint256 pending, uint256 claimed, uint256 gameBalance)","function getPoolStats() external view returns (uint256 _totalDividendPool, uint256 _totalClaimed, uint256 _totalPending, uint256 _totalDividendPerShare)"];class h{provider;signer;rpcUrl;privateKey;constructor(e){this.rpcUrl=e.rpcUrl,this.privateKey=e.privateKey,this.provider=new t.r(e.rpcUrl),this.signer=new a.w5(e.privateKey,this.provider)}async callJsonRpc(e,o){let n=await fetch(this.rpcUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({jsonrpc:"2.0",id:Date.now(),method:e,params:o})}),t=await n.json();if(t.error)throw Error(`JSON-RPC Error: ${t.error.message}`);return t.result}async transferERC20(e,o,n){try{let t,l;if(console.log("[Blockchain] 准备转账 ERC20 代币"),console.log("[Blockchain] 代币地址:",e),console.log("[Blockchain] 接收地址:",o),console.log("[Blockchain] 转账数量:",n),!i.UJ(e))throw Error("Invalid token address format");if(!i.UJ(o))throw Error("Invalid recipient address format");console.log("[Blockchain] 使用 JSON-RPC 构建转账交易...");let g=new a.w5(this.privateKey);console.log("[Blockchain] 通过原始 JSON-RPC 获取交易数据...");try{let e=await this.callJsonRpc("eth_getTransactionCount",[g.address,"latest"]);t=parseInt(e,16),console.log("[Blockchain] 获取 Nonce:",t)}catch(e){console.warn("[Blockchain] 无法获取 Nonce，使用默认值 0"),t=0}try{let e=await this.callJsonRpc("eth_gasPrice",[]);l=r.O$.from(e),console.log("[Blockchain] 获取 Gas Price:",s.bM(l,"gwei"),"gwei")}catch(e){console.warn("[Blockchain] 无法获取 Gas Price，使用默认值 1 gwei"),l=s.vz("1","gwei")}let h=r.O$.from("100000");console.log("[Blockchain] 交易参数:"),console.log("  • Nonce:",t),console.log("  • Gas Price:",s.bM(l,"gwei"),"gwei"),console.log("  • Gas Limit:",h.toString());let u=new c.vU(d).encodeFunctionData("transfer",[o,n]),p={to:e,from:g.address,nonce:t,gasLimit:h,gasPrice:l,data:u};console.log("[Blockchain] 签名交易...");let v=await g.signTransaction(p);console.log("[Blockchain] 发送签名的交易到网络...");let w=await this.callJsonRpc("eth_sendRawTransaction",[v]);console.log("[Blockchain] 交易已发送，Hash:",w),console.log("[Blockchain] 等待交易确认...");let m=null;for(let e=0;e<30;e++){try{let e=await this.callJsonRpc("eth_getTransactionReceipt",[w]);if(e){m=e,console.log("[Blockchain] 交易已确认，区块号:",parseInt(e.blockNumber,16));break}}catch(o){console.warn("[Blockchain] 等待确认中...",e+1)}await new Promise(e=>setTimeout(e,2e3))}return{transactionHash:w,blockNumber:m?parseInt(m.blockNumber,16):void 0}}catch(e){throw console.error("[Blockchain] 转账失败:",e.message),e}}async getERC20Balance(e,o){try{let n=new l.CH(e,d,this.provider);return(await n.balanceOf(o)).toString()}catch(e){throw console.error("[Blockchain] 查询余额失败:",e),e}}async getSignerAddress(){return await this.signer.getAddress()}async getNetworkInfo(){let e=await this.provider.getNetwork();return{chainId:e.chainId,name:e.name}}async updateGameDividendPool(e,o){try{let n,t;if(console.log("[Blockchain] 准备调用 GameDividendPool.depositDividend()"),console.log("[Blockchain] 分红池地址:",e),console.log("[Blockchain] 分红金额:",o),!i.UJ(e))throw Error("Invalid dividend pool address format");let l=new a.w5(this.privateKey);try{let e=await this.callJsonRpc("eth_getTransactionCount",[l.address,"latest"]);n=parseInt(e,16),console.log("[Blockchain] 获取 Nonce:",n)}catch(e){console.warn("[Blockchain] 无法获取 Nonce，使用默认值 0"),n=0}try{let e=await this.callJsonRpc("eth_gasPrice",[]);t=r.O$.from(e),console.log("[Blockchain] 获取 Gas Price:",s.bM(t,"gwei"),"gwei")}catch(e){console.warn("[Blockchain] 无法获取 Gas Price，使用默认值 1 gwei"),t=s.vz("1","gwei")}let h=r.O$.from("150000");console.log("[Blockchain] 交易参数:"),console.log("  • Nonce:",n),console.log("  • Gas Price:",s.bM(t,"gwei"),"gwei"),console.log("  • Gas Limit:",h.toString()),console.log("[Blockchain] 构建 approve 交易...");let u=process.env.VIRTUAL_TOKEN_ADDRESS;if(!u)throw Error("VIRTUAL_TOKEN_ADDRESS environment variable is not set");let p=new c.vU(d).encodeFunctionData("approve",[e,o]),v={to:u,from:l.address,nonce:n,gasLimit:r.O$.from("100000"),gasPrice:t,data:p};console.log("[Blockchain] 签名 approve 交易...");let w=await l.signTransaction(v);console.log("[Blockchain] 发送 approve 交易...");let m=await this.callJsonRpc("eth_sendRawTransaction",[w]);console.log("[Blockchain] Approve 交易已发送，Hash:",m),console.log("[Blockchain] 等待 approve 交易确认...");for(let e=0;e<30;e++){try{if(await this.callJsonRpc("eth_getTransactionReceipt",[m])){console.log("[Blockchain] Approve 交易已确认");break}}catch(o){console.warn("[Blockchain] 等待 approve 确认中...",e+1)}await new Promise(e=>setTimeout(e,2e3))}console.log("[Blockchain] 构建 depositDividend 交易...");let f=new c.vU(g).encodeFunctionData("depositDividend",[o]),B={to:e,from:l.address,nonce:n+1,gasLimit:r.O$.from("150000"),gasPrice:t,data:f};console.log("[Blockchain] 签名 depositDividend 交易...");let k=await l.signTransaction(B);console.log("[Blockchain] 发送 depositDividend 交易...");let P=await this.callJsonRpc("eth_sendRawTransaction",[k]);console.log("[Blockchain] Deposit 交易已发送，Hash:",P),console.log("[Blockchain] 等待 depositDividend 交易确认...");let D=null;for(let e=0;e<30;e++){try{let e=await this.callJsonRpc("eth_getTransactionReceipt",[P]);if(e){D=e,console.log("[Blockchain] Deposit 交易已确认，区块号:",parseInt(e.blockNumber,16));break}}catch(o){console.warn("[Blockchain] 等待 deposit 确认中...",e+1)}await new Promise(e=>setTimeout(e,2e3))}return{transactionHash:P,blockNumber:D?parseInt(D.blockNumber,16):void 0}}catch(e){throw console.error("[Blockchain] 分红更新失败:",e.message),e}}async getUserDividendInfo(e,o){try{if(console.log("[Blockchain] 查询用户分红信息"),console.log("[Blockchain] 分红池地址:",e),console.log("[Blockchain] 用户地址:",o),!i.UJ(e))throw Error("Invalid dividend pool address format");if(!i.UJ(o))throw Error("Invalid user address format");let n=new l.CH(e,g,this.provider),t=await n.getUserDividendInfo(o);return console.log("[Blockchain] 用户分红信息查询成功"),console.log("[Blockchain] 待提取分红:",t.pending.toString()),console.log("[Blockchain] 已提取分红:",t.claimed.toString()),console.log("[Blockchain] GAME 余额:",t.gameBalance.toString()),{pending:t.pending.toString(),claimed:t.claimed.toString(),gameBalance:t.gameBalance.toString()}}catch(e){throw console.error("[Blockchain] 查询分红信息失败:",e.message),e}}async getDividendPoolStats(e){try{if(console.log("[Blockchain] 查询分红池统计信息"),!i.UJ(e))throw Error("Invalid dividend pool address format");let o=new l.CH(e,g,this.provider),n=await o.getPoolStats();return console.log("[Blockchain] 分红池统计信息查询成功"),{totalDividendPool:n._totalDividendPool.toString(),totalClaimed:n._totalClaimed.toString(),totalPending:n._totalPending.toString(),totalDividendPerShare:n._totalDividendPerShare.toString()}}catch(e){throw console.error("[Blockchain] 查询分红池统计失败:",e.message),e}}}function u(){let e=process.env.BASE_SEPOLIA_RPC_URL,o=process.env.DEPLOYER_PRIVATE_KEY,n=parseInt(process.env.CHAIN_ID||"84532");if(!e)throw Error("BASE_SEPOLIA_RPC_URL environment variable is not set");if(!o)throw Error("DEPLOYER_PRIVATE_KEY environment variable is not set");return new h({rpcUrl:e,privateKey:o,chainId:n})}function p(e,o=18){return s.vz(e,o).toString()}function v(e,o=18){return s.bM(e,o)}}};var o=require("../../../../webpack-runtime.js");o.C(e);var n=e=>o(o.s=e),t=o.X(0,[789,878],()=>n(61));module.exports=t})();