"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/dividend/balance/route";
exports.ids = ["app/api/dividend/balance/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdividend%2Fbalance%2Froute&page=%2Fapi%2Fdividend%2Fbalance%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdividend%2Fbalance%2Froute.ts&appDir=%2FUsers%2Fdaniel%2FCode%2F10_project%2FGame%2Fserver%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdaniel%2FCode%2F10_project%2FGame%2Fserver&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdividend%2Fbalance%2Froute&page=%2Fapi%2Fdividend%2Fbalance%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdividend%2Fbalance%2Froute.ts&appDir=%2FUsers%2Fdaniel%2FCode%2F10_project%2FGame%2Fserver%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdaniel%2FCode%2F10_project%2FGame%2Fserver&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_daniel_Code_10_project_Game_server_app_api_dividend_balance_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/dividend/balance/route.ts */ \"(rsc)/./app/api/dividend/balance/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/dividend/balance/route\",\n        pathname: \"/api/dividend/balance\",\n        filename: \"route\",\n        bundlePath: \"app/api/dividend/balance/route\"\n    },\n    resolvedPagePath: \"/Users/daniel/Code/10_project/Game/server/app/api/dividend/balance/route.ts\",\n    nextConfigOutput,\n    userland: _Users_daniel_Code_10_project_Game_server_app_api_dividend_balance_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/dividend/balance/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZkaXZpZGVuZCUyRmJhbGFuY2UlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmRpdmlkZW5kJTJGYmFsYW5jZSUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmRpdmlkZW5kJTJGYmFsYW5jZSUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmRhbmllbCUyRkNvZGUlMkYxMF9wcm9qZWN0JTJGR2FtZSUyRnNlcnZlciUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZkYW5pZWwlMkZDb2RlJTJGMTBfcHJvamVjdCUyRkdhbWUlMkZzZXJ2ZXImaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQzJCO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGdhbWUtYWkvc2VydmVyLz9lOThiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9kYW5pZWwvQ29kZS8xMF9wcm9qZWN0L0dhbWUvc2VydmVyL2FwcC9hcGkvZGl2aWRlbmQvYmFsYW5jZS9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZGl2aWRlbmQvYmFsYW5jZS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2RpdmlkZW5kL2JhbGFuY2VcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2RpdmlkZW5kL2JhbGFuY2Uvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvZGFuaWVsL0NvZGUvMTBfcHJvamVjdC9HYW1lL3NlcnZlci9hcHAvYXBpL2RpdmlkZW5kL2JhbGFuY2Uvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2RpdmlkZW5kL2JhbGFuY2Uvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdividend%2Fbalance%2Froute&page=%2Fapi%2Fdividend%2Fbalance%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdividend%2Fbalance%2Froute.ts&appDir=%2FUsers%2Fdaniel%2FCode%2F10_project%2FGame%2Fserver%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdaniel%2FCode%2F10_project%2FGame%2Fserver&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/dividend/balance/route.ts":
/*!*******************************************!*\
  !*** ./app/api/dividend/balance/route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   OPTIONS: () => (/* binding */ OPTIONS)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_address_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/address-utils */ \"(rsc)/./lib/address-utils.ts\");\n/* harmony import */ var _lib_blockchain__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/blockchain */ \"(rsc)/./lib/blockchain.ts\");\n/**\n * 查询用户分红接口\n *\n * 功能：\n * 1. 查询用户可提取的分红\n * 2. 查询用户已提取的分红\n * 3. 查询用户的 $GAME 余额\n * 4. 查询分红池的整体统计\n *\n * 请求方式: GET /api/dividend/balance\n *\n * 查询参数:\n * - userAddress: 用户钱包地址（必需）\n *\n * 响应格式:\n * {\n *   \"success\": true,\n *   \"userAddress\": \"0x...\",\n *   \"dividend\": {\n *     \"pending\": {\n *       \"wei\": \"7000000000000000000\",\n *       \"virtual\": \"7\"\n *     },\n *     \"claimed\": {\n *       \"wei\": \"3000000000000000000\",\n *       \"virtual\": \"3\"\n *     },\n *     \"gameBalance\": {\n *       \"wei\": \"100000000000000000000\",\n *       \"game\": \"100\"\n *     },\n *     \"totalEarnable\": {\n *       \"wei\": \"10000000000000000000\",\n *       \"virtual\": \"10\"\n *     }\n *   },\n *   \"poolStats\": {\n *     \"totalDividendPool\": \"1000000000000000000000\",\n *     \"totalClaimed\": \"300000000000000000000\",\n *     \"totalPending\": \"700000000000000000000\",\n *     \"totalDividendPerShare\": \"50000000000000000\"\n *   },\n *   \"timestamp\": 1729876000000\n * }\n */ \n\n\nasync function GET(request) {\n    try {\n        // 从查询参数中获取 userAddress\n        const userAddress = request.nextUrl.searchParams.get(\"userAddress\");\n        if (!userAddress) {\n            console.warn(\"[Dividend Balance API] 缺少必需参数: userAddress\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Missing required parameter: userAddress\"\n            }, {\n                status: 400\n            });\n        }\n        // 验证地址格式\n        if (!(0,_lib_address_utils__WEBPACK_IMPORTED_MODULE_1__.isValidAddress)(userAddress)) {\n            console.warn(\"[Dividend Balance API] 无效的钱包地址:\", userAddress);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Invalid user address format\"\n            }, {\n                status: 400\n            });\n        }\n        const normalizedAddress = (0,_lib_address_utils__WEBPACK_IMPORTED_MODULE_1__.normalizeAddress)(userAddress);\n        console.log(\"[Dividend Balance API] 查询分红信息，用户地址:\", normalizedAddress);\n        // 获取分红池地址\n        const dividendPoolAddress = process.env.GAME_DIVIDEND_POOL_ADDRESS;\n        if (!dividendPoolAddress) {\n            console.error(\"[Dividend Balance API] GAME_DIVIDEND_POOL_ADDRESS 未配置\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Dividend pool address not configured\"\n            }, {\n                status: 500\n            });\n        }\n        // 创建区块链客户端并查询数据\n        const blockchain = (0,_lib_blockchain__WEBPACK_IMPORTED_MODULE_2__.createBlockchainClient)();\n        // 查询用户的分红信息\n        console.log(\"[Dividend Balance API] 查询用户分红信息...\");\n        const userDividendInfo = await blockchain.getUserDividendInfo(dividendPoolAddress, normalizedAddress);\n        // 查询分红池的统计数据\n        console.log(\"[Dividend Balance API] 查询分红池统计...\");\n        const poolStats = await blockchain.getDividendPoolStats(dividendPoolAddress);\n        // 格式化返回数据\n        const pendingWei = userDividendInfo.pending;\n        const claimedWei = userDividendInfo.claimed;\n        const gameBalanceWei = userDividendInfo.gameBalance;\n        const totalEarnableWei = (BigInt(pendingWei) + BigInt(claimedWei)).toString();\n        console.log(\"[Dividend Balance API] 数据格式化完成\");\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            userAddress: normalizedAddress,\n            dividend: {\n                pending: {\n                    wei: pendingWei,\n                    virtual: (0,_lib_blockchain__WEBPACK_IMPORTED_MODULE_2__.fromWei)(pendingWei, 18)\n                },\n                claimed: {\n                    wei: claimedWei,\n                    virtual: (0,_lib_blockchain__WEBPACK_IMPORTED_MODULE_2__.fromWei)(claimedWei, 18)\n                },\n                gameBalance: {\n                    wei: gameBalanceWei,\n                    game: (0,_lib_blockchain__WEBPACK_IMPORTED_MODULE_2__.fromWei)(gameBalanceWei, 18)\n                },\n                totalEarnable: {\n                    wei: totalEarnableWei,\n                    virtual: (0,_lib_blockchain__WEBPACK_IMPORTED_MODULE_2__.fromWei)(totalEarnableWei, 18)\n                }\n            },\n            poolStats: {\n                totalDividendPool: poolStats.totalDividendPool,\n                totalClaimed: poolStats.totalClaimed,\n                totalPending: poolStats.totalPending,\n                totalDividendPerShare: poolStats.totalDividendPerShare\n            },\n            timestamp: Date.now()\n        }, {\n            status: 200\n        });\n    } catch (error) {\n        console.error(\"[Dividend Balance API] 处理请求失败:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Failed to query dividend balance\",\n            details: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * 处理 OPTIONS 请求（用于 CORS 预检）\n */ async function OPTIONS() {\n    return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(null, {\n        status: 200,\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Methods\": \"GET, OPTIONS\",\n            \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\"\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/dividend/balance/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/address-utils.ts":
/*!******************************!*\
  !*** ./lib/address-utils.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isValidAddress: () => (/* binding */ isValidAddress),\n/* harmony export */   isValidTransactionHash: () => (/* binding */ isValidTransactionHash),\n/* harmony export */   normalizeAddress: () => (/* binding */ normalizeAddress)\n/* harmony export */ });\n/**\n * 地址验证和规范化工具\n * 独立于 ethers，避免 Next.js 兼容性问题\n */ /**\n * 验证是否为有效的以太坊地址\n * @param address 地址字符串\n * @returns 是否有效\n */ function isValidAddress(address) {\n    return /^0x[a-fA-F0-9]{40}$/.test(address);\n}\n/**\n * 规范化地址为小写格式\n * @param address 地址字符串\n * @returns 规范化后的地址\n */ function normalizeAddress(address) {\n    if (!isValidAddress(address)) {\n        throw new Error(\"Invalid address format\");\n    }\n    return address.toLowerCase();\n}\n/**\n * 验证交易哈希格式\n * @param hash 交易哈希\n * @returns 是否有效\n */ function isValidTransactionHash(hash) {\n    return /^0x[a-fA-F0-9]{64}$/.test(hash);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvYWRkcmVzcy11dGlscy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7O0NBR0MsR0FFRDs7OztDQUlDLEdBQ00sU0FBU0EsZUFBZUMsT0FBZTtJQUM1QyxPQUFPLHNCQUFzQkMsSUFBSSxDQUFDRDtBQUNwQztBQUVBOzs7O0NBSUMsR0FDTSxTQUFTRSxpQkFBaUJGLE9BQWU7SUFDOUMsSUFBSSxDQUFDRCxlQUFlQyxVQUFVO1FBQzVCLE1BQU0sSUFBSUcsTUFBTTtJQUNsQjtJQUNBLE9BQU9ILFFBQVFJLFdBQVc7QUFDNUI7QUFFQTs7OztDQUlDLEdBQ00sU0FBU0MsdUJBQXVCQyxJQUFZO0lBQ2pELE9BQU8sc0JBQXNCTCxJQUFJLENBQUNLO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGdhbWUtYWkvc2VydmVyLy4vbGliL2FkZHJlc3MtdXRpbHMudHM/NjNmMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIOWcsOWdgOmqjOivgeWSjOinhOiMg+WMluW3peWFt1xuICog54us56uL5LqOIGV0aGVyc++8jOmBv+WFjSBOZXh0LmpzIOWFvOWuueaAp+mXrumimFxuICovXG5cbi8qKlxuICog6aqM6K+B5piv5ZCm5Li65pyJ5pWI55qE5Lul5aSq5Z2K5Zyw5Z2AXG4gKiBAcGFyYW0gYWRkcmVzcyDlnLDlnYDlrZfnrKbkuLJcbiAqIEByZXR1cm5zIOaYr+WQpuacieaViFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZEFkZHJlc3MoYWRkcmVzczogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiAvXjB4W2EtZkEtRjAtOV17NDB9JC8udGVzdChhZGRyZXNzKVxufVxuXG4vKipcbiAqIOinhOiMg+WMluWcsOWdgOS4uuWwj+WGmeagvOW8j1xuICogQHBhcmFtIGFkZHJlc3Mg5Zyw5Z2A5a2X56ym5LiyXG4gKiBAcmV0dXJucyDop4TojIPljJblkI7nmoTlnLDlnYBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUFkZHJlc3MoYWRkcmVzczogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKCFpc1ZhbGlkQWRkcmVzcyhhZGRyZXNzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhZGRyZXNzIGZvcm1hdCcpXG4gIH1cbiAgcmV0dXJuIGFkZHJlc3MudG9Mb3dlckNhc2UoKVxufVxuXG4vKipcbiAqIOmqjOivgeS6pOaYk+WTiOW4jOagvOW8j1xuICogQHBhcmFtIGhhc2gg5Lqk5piT5ZOI5biMXG4gKiBAcmV0dXJucyDmmK/lkKbmnInmlYhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRUcmFuc2FjdGlvbkhhc2goaGFzaDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiAvXjB4W2EtZkEtRjAtOV17NjR9JC8udGVzdChoYXNoKVxufVxuIl0sIm5hbWVzIjpbImlzVmFsaWRBZGRyZXNzIiwiYWRkcmVzcyIsInRlc3QiLCJub3JtYWxpemVBZGRyZXNzIiwiRXJyb3IiLCJ0b0xvd2VyQ2FzZSIsImlzVmFsaWRUcmFuc2FjdGlvbkhhc2giLCJoYXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/address-utils.ts\n");

/***/ }),

/***/ "(rsc)/./lib/blockchain.ts":
/*!***************************!*\
  !*** ./lib/blockchain.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlockchainClient: () => (/* binding */ BlockchainClient),\n/* harmony export */   createBlockchainClient: () => (/* binding */ createBlockchainClient),\n/* harmony export */   fromWei: () => (/* binding */ fromWei),\n/* harmony export */   toWei: () => (/* binding */ toWei)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/@ethersproject/wallet/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/@ethersproject/units/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/@ethersproject/abi/lib.esm/interface.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/@ethersproject/contracts/lib.esm/index.js\");\n/**\n * 区块链交互模块\n * 用于与智能合约交互，进行代币转账等操作\n */ \n/**\n * IERC20 标准接口 ABI\n */ const ERC20_ABI = [\n    \"function transfer(address to, uint256 amount) public returns (bool)\",\n    \"function balanceOf(address account) public view returns (uint256)\",\n    \"function approve(address spender, uint256 amount) public returns (bool)\",\n    \"function allowance(address owner, address spender) public view returns (uint256)\"\n];\n/**\n * GameDividendPool 合约 ABI（只需要调用的方法）\n */ const DIVIDEND_POOL_ABI = [\n    \"function depositDividend(uint256 amount) external\",\n    \"function claimDividend() external nonReentrant returns (uint256 claimable)\",\n    \"function getPendingDividend(address user) external view returns (uint256)\",\n    \"function getUserDividendInfo(address user) external view returns (uint256 pending, uint256 claimed, uint256 gameBalance)\",\n    \"function getPoolStats() external view returns (uint256 _totalDividendPool, uint256 _totalClaimed, uint256 _totalPending, uint256 _totalDividendPerShare)\"\n];\n/**\n * 区块链客户端类\n */ class BlockchainClient {\n    provider;\n    signer;\n    rpcUrl;\n    privateKey;\n    constructor(config){\n        this.rpcUrl = config.rpcUrl;\n        this.privateKey = config.privateKey;\n        this.provider = new ethers__WEBPACK_IMPORTED_MODULE_0__.JsonRpcProvider(config.rpcUrl);\n        this.signer = new ethers__WEBPACK_IMPORTED_MODULE_1__.Wallet(config.privateKey, this.provider);\n    // 注意：chainId 目前未使用，可在未来需要时启用\n    }\n    /**\n   * 执行原始 JSON-RPC 调用\n   */ async callJsonRpc(method, params) {\n        const response = await fetch(this.rpcUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                jsonrpc: \"2.0\",\n                id: Date.now(),\n                method,\n                params\n            })\n        });\n        const data = await response.json();\n        if (data.error) {\n            throw new Error(`JSON-RPC Error: ${data.error.message}`);\n        }\n        return data.result;\n    }\n    /**\n   * 转账 ERC20 代币\n   * @param tokenAddress 代币合约地址\n   * @param toAddress 接收地址\n   * @param amount 转账数量（单位：Wei）\n   * @returns 交易哈希\n   */ async transferERC20(tokenAddress, toAddress, amount) {\n        try {\n            console.log(\"[Blockchain] 准备转账 ERC20 代币\");\n            console.log(\"[Blockchain] 代币地址:\", tokenAddress);\n            console.log(\"[Blockchain] 接收地址:\", toAddress);\n            console.log(\"[Blockchain] 转账数量:\", amount);\n            // 验证地址格式\n            if (!ethers__WEBPACK_IMPORTED_MODULE_2__.isAddress(tokenAddress)) {\n                throw new Error(\"Invalid token address format\");\n            }\n            if (!ethers__WEBPACK_IMPORTED_MODULE_2__.isAddress(toAddress)) {\n                throw new Error(\"Invalid recipient address format\");\n            }\n            // 使用底层JSON-RPC调用而不是ethers.js Contract接口\n            // 以避免网络检测的问题\n            console.log(\"[Blockchain] 使用 JSON-RPC 构建转账交易...\");\n            // 创建钱包用于签名\n            const wallet = new ethers__WEBPACK_IMPORTED_MODULE_1__.Wallet(this.privateKey);\n            // 使用直接的 JSON-RPC 调用而不是通过 provider 接口\n            // 这样可以避免 ethers.js 的网络检测问题\n            console.log(\"[Blockchain] 通过原始 JSON-RPC 获取交易数据...\");\n            let nonce;\n            let gasPriceWei;\n            try {\n                // 直接调用 JSON-RPC\n                const nonceHex = await this.callJsonRpc(\"eth_getTransactionCount\", [\n                    wallet.address,\n                    \"latest\"\n                ]);\n                nonce = parseInt(nonceHex, 16);\n                console.log(\"[Blockchain] 获取 Nonce:\", nonce);\n            } catch (error) {\n                console.warn(\"[Blockchain] 无法获取 Nonce，使用默认值 0\");\n                nonce = 0;\n            }\n            try {\n                const gasPriceHex = await this.callJsonRpc(\"eth_gasPrice\", []);\n                gasPriceWei = ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(gasPriceHex);\n                console.log(\"[Blockchain] 获取 Gas Price:\", ethers__WEBPACK_IMPORTED_MODULE_4__.formatUnits(gasPriceWei, \"gwei\"), \"gwei\");\n            } catch (error) {\n                console.warn(\"[Blockchain] 无法获取 Gas Price，使用默认值 1 gwei\");\n                gasPriceWei = ethers__WEBPACK_IMPORTED_MODULE_4__.parseUnits(\"1\", \"gwei\");\n            }\n            const gasLimit = ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(\"100000\");\n            console.log(\"[Blockchain] 交易参数:\");\n            console.log(\"  • Nonce:\", nonce);\n            console.log(\"  • Gas Price:\", ethers__WEBPACK_IMPORTED_MODULE_4__.formatUnits(gasPriceWei, \"gwei\"), \"gwei\");\n            console.log(\"  • Gas Limit:\", gasLimit.toString());\n            // 构建 transfer() 函数调用数据\n            const iface = new ethers__WEBPACK_IMPORTED_MODULE_5__.Interface(ERC20_ABI);\n            const data = iface.encodeFunctionData(\"transfer\", [\n                toAddress,\n                amount\n            ]);\n            // 构建交易对象\n            const tx = {\n                to: tokenAddress,\n                from: wallet.address,\n                nonce: nonce,\n                gasLimit: gasLimit,\n                gasPrice: gasPriceWei,\n                data: data\n            };\n            console.log(\"[Blockchain] 签名交易...\");\n            // 签名交易\n            const signedTx = await wallet.signTransaction(tx);\n            console.log(\"[Blockchain] 发送签名的交易到网络...\");\n            // 直接通过 JSON-RPC 发送原始交易，避免 provider 的网络检测\n            const txHash = await this.callJsonRpc(\"eth_sendRawTransaction\", [\n                signedTx\n            ]);\n            console.log(\"[Blockchain] 交易已发送，Hash:\", txHash);\n            console.log(\"[Blockchain] 等待交易确认...\");\n            // 等待交易确认（最多等待 60 秒）\n            const maxAttempts = 30;\n            let receipt = null;\n            for(let i = 0; i < maxAttempts; i++){\n                try {\n                    const receiptData = await this.callJsonRpc(\"eth_getTransactionReceipt\", [\n                        txHash\n                    ]);\n                    if (receiptData) {\n                        receipt = receiptData;\n                        console.log(\"[Blockchain] 交易已确认，区块号:\", parseInt(receiptData.blockNumber, 16));\n                        break;\n                    }\n                } catch (error) {\n                    console.warn(\"[Blockchain] 等待确认中...\", i + 1);\n                }\n                // 等待 2 秒后重试\n                await new Promise((resolve)=>setTimeout(resolve, 2000));\n            }\n            return {\n                transactionHash: txHash,\n                blockNumber: receipt ? parseInt(receipt.blockNumber, 16) : undefined\n            };\n        } catch (error) {\n            const errorMsg = error.message;\n            console.error(\"[Blockchain] 转账失败:\", errorMsg);\n            throw error;\n        }\n    }\n    /**\n   * 检查 ERC20 代币余额\n   * @param tokenAddress 代币合约地址\n   * @param address 账户地址\n   * @returns 余额（单位：Wei）\n   */ async getERC20Balance(tokenAddress, address) {\n        try {\n            const tokenContract = new ethers__WEBPACK_IMPORTED_MODULE_6__.Contract(tokenAddress, ERC20_ABI, this.provider);\n            const balance = await tokenContract.balanceOf(address);\n            return balance.toString();\n        } catch (error) {\n            console.error(\"[Blockchain] 查询余额失败:\", error);\n            throw error;\n        }\n    }\n    /**\n   * 获取 Deployer 地址\n   */ async getSignerAddress() {\n        return await this.signer.getAddress();\n    }\n    /**\n   * 获取网络信息\n   */ async getNetworkInfo() {\n        const network = await this.provider.getNetwork();\n        return {\n            chainId: network.chainId,\n            name: network.name\n        };\n    }\n    /**\n   * 调用 GameDividendPool 的 depositDividend 方法，更新分红\n   * @param dividendPoolAddress 分红池合约地址\n   * @param amount VIRTUAL 代币金额（Wei 单位）\n   * @returns 交易哈希\n   */ async updateGameDividendPool(dividendPoolAddress, amount) {\n        try {\n            console.log(\"[Blockchain] 准备调用 GameDividendPool.depositDividend()\");\n            console.log(\"[Blockchain] 分红池地址:\", dividendPoolAddress);\n            console.log(\"[Blockchain] 分红金额:\", amount);\n            // 验证地址格式\n            if (!ethers__WEBPACK_IMPORTED_MODULE_2__.isAddress(dividendPoolAddress)) {\n                throw new Error(\"Invalid dividend pool address format\");\n            }\n            // 创建钱包用于签名\n            const wallet = new ethers__WEBPACK_IMPORTED_MODULE_1__.Wallet(this.privateKey);\n            let nonce;\n            let gasPriceWei;\n            try {\n                const nonceHex = await this.callJsonRpc(\"eth_getTransactionCount\", [\n                    wallet.address,\n                    \"latest\"\n                ]);\n                nonce = parseInt(nonceHex, 16);\n                console.log(\"[Blockchain] 获取 Nonce:\", nonce);\n            } catch (error) {\n                console.warn(\"[Blockchain] 无法获取 Nonce，使用默认值 0\");\n                nonce = 0;\n            }\n            try {\n                const gasPriceHex = await this.callJsonRpc(\"eth_gasPrice\", []);\n                gasPriceWei = ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(gasPriceHex);\n                console.log(\"[Blockchain] 获取 Gas Price:\", ethers__WEBPACK_IMPORTED_MODULE_4__.formatUnits(gasPriceWei, \"gwei\"), \"gwei\");\n            } catch (error) {\n                console.warn(\"[Blockchain] 无法获取 Gas Price，使用默认值 1 gwei\");\n                gasPriceWei = ethers__WEBPACK_IMPORTED_MODULE_4__.parseUnits(\"1\", \"gwei\");\n            }\n            const gasLimit = ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(\"150000\") // depositDividend 需要更多 gas\n            ;\n            console.log(\"[Blockchain] 交易参数:\");\n            console.log(\"  • Nonce:\", nonce);\n            console.log(\"  • Gas Price:\", ethers__WEBPACK_IMPORTED_MODULE_4__.formatUnits(gasPriceWei, \"gwei\"), \"gwei\");\n            console.log(\"  • Gas Limit:\", gasLimit.toString());\n            // 需要先调用 VIRTUAL 代币的 approve，授权 dividendPool 使用我们的代币\n            console.log(\"[Blockchain] 构建 approve 交易...\");\n            const virtualTokenAddress = process.env.VIRTUAL_TOKEN_ADDRESS;\n            if (!virtualTokenAddress) {\n                throw new Error(\"VIRTUAL_TOKEN_ADDRESS environment variable is not set\");\n            }\n            // 构建 approve 交易数据\n            const iface = new ethers__WEBPACK_IMPORTED_MODULE_5__.Interface(ERC20_ABI);\n            const approveData = iface.encodeFunctionData(\"approve\", [\n                dividendPoolAddress,\n                amount\n            ]);\n            const approveTx = {\n                to: virtualTokenAddress,\n                from: wallet.address,\n                nonce: nonce,\n                gasLimit: ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(\"100000\"),\n                gasPrice: gasPriceWei,\n                data: approveData\n            };\n            console.log(\"[Blockchain] 签名 approve 交易...\");\n            const signedApproveTx = await wallet.signTransaction(approveTx);\n            console.log(\"[Blockchain] 发送 approve 交易...\");\n            const approveTxHash = await this.callJsonRpc(\"eth_sendRawTransaction\", [\n                signedApproveTx\n            ]);\n            console.log(\"[Blockchain] Approve 交易已发送，Hash:\", approveTxHash);\n            // 等待 approve 交易确认\n            console.log(\"[Blockchain] 等待 approve 交易确认...\");\n            for(let i = 0; i < 30; i++){\n                try {\n                    const receiptData = await this.callJsonRpc(\"eth_getTransactionReceipt\", [\n                        approveTxHash\n                    ]);\n                    if (receiptData) {\n                        console.log(\"[Blockchain] Approve 交易已确认\");\n                        break;\n                    }\n                } catch (error) {\n                    console.warn(\"[Blockchain] 等待 approve 确认中...\", i + 1);\n                }\n                await new Promise((resolve)=>setTimeout(resolve, 2000));\n            }\n            // 现在构建 depositDividend 交易\n            console.log(\"[Blockchain] 构建 depositDividend 交易...\");\n            const depositIface = new ethers__WEBPACK_IMPORTED_MODULE_5__.Interface(DIVIDEND_POOL_ABI);\n            const depositData = depositIface.encodeFunctionData(\"depositDividend\", [\n                amount\n            ]);\n            const depositTx = {\n                to: dividendPoolAddress,\n                from: wallet.address,\n                nonce: nonce + 1,\n                gasLimit: ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(\"150000\"),\n                gasPrice: gasPriceWei,\n                data: depositData\n            };\n            console.log(\"[Blockchain] 签名 depositDividend 交易...\");\n            const signedDepositTx = await wallet.signTransaction(depositTx);\n            console.log(\"[Blockchain] 发送 depositDividend 交易...\");\n            const depositTxHash = await this.callJsonRpc(\"eth_sendRawTransaction\", [\n                signedDepositTx\n            ]);\n            console.log(\"[Blockchain] Deposit 交易已发送，Hash:\", depositTxHash);\n            // 等待 deposit 交易确认\n            console.log(\"[Blockchain] 等待 depositDividend 交易确认...\");\n            let receipt = null;\n            for(let i = 0; i < 30; i++){\n                try {\n                    const receiptData = await this.callJsonRpc(\"eth_getTransactionReceipt\", [\n                        depositTxHash\n                    ]);\n                    if (receiptData) {\n                        receipt = receiptData;\n                        console.log(\"[Blockchain] Deposit 交易已确认，区块号:\", parseInt(receiptData.blockNumber, 16));\n                        break;\n                    }\n                } catch (error) {\n                    console.warn(\"[Blockchain] 等待 deposit 确认中...\", i + 1);\n                }\n                await new Promise((resolve)=>setTimeout(resolve, 2000));\n            }\n            return {\n                transactionHash: depositTxHash,\n                blockNumber: receipt ? parseInt(receipt.blockNumber, 16) : undefined\n            };\n        } catch (error) {\n            const errorMsg = error.message;\n            console.error(\"[Blockchain] 分红更新失败:\", errorMsg);\n            throw error;\n        }\n    }\n    /**\n   * 查询用户的分红信息\n   * @param dividendPoolAddress 分红池合约地址\n   * @param userAddress 用户地址\n   * @returns 用户分红信息\n   */ async getUserDividendInfo(dividendPoolAddress, userAddress) {\n        try {\n            console.log(\"[Blockchain] 查询用户分红信息\");\n            console.log(\"[Blockchain] 分红池地址:\", dividendPoolAddress);\n            console.log(\"[Blockchain] 用户地址:\", userAddress);\n            // 验证地址格式\n            if (!ethers__WEBPACK_IMPORTED_MODULE_2__.isAddress(dividendPoolAddress)) {\n                throw new Error(\"Invalid dividend pool address format\");\n            }\n            if (!ethers__WEBPACK_IMPORTED_MODULE_2__.isAddress(userAddress)) {\n                throw new Error(\"Invalid user address format\");\n            }\n            // 创建合约实例并调用 view 函数\n            const contract = new ethers__WEBPACK_IMPORTED_MODULE_6__.Contract(dividendPoolAddress, DIVIDEND_POOL_ABI, this.provider);\n            const result = await contract.getUserDividendInfo(userAddress);\n            console.log(\"[Blockchain] 用户分红信息查询成功\");\n            console.log(\"[Blockchain] 待提取分红:\", result.pending.toString());\n            console.log(\"[Blockchain] 已提取分红:\", result.claimed.toString());\n            console.log(\"[Blockchain] GAME 余额:\", result.gameBalance.toString());\n            return {\n                pending: result.pending.toString(),\n                claimed: result.claimed.toString(),\n                gameBalance: result.gameBalance.toString()\n            };\n        } catch (error) {\n            const errorMsg = error.message;\n            console.error(\"[Blockchain] 查询分红信息失败:\", errorMsg);\n            throw error;\n        }\n    }\n    /**\n   * 查询分红池的统计数据\n   * @param dividendPoolAddress 分红池合约地址\n   * @returns 分红池统计信息\n   */ async getDividendPoolStats(dividendPoolAddress) {\n        try {\n            console.log(\"[Blockchain] 查询分红池统计信息\");\n            // 验证地址格式\n            if (!ethers__WEBPACK_IMPORTED_MODULE_2__.isAddress(dividendPoolAddress)) {\n                throw new Error(\"Invalid dividend pool address format\");\n            }\n            const contract = new ethers__WEBPACK_IMPORTED_MODULE_6__.Contract(dividendPoolAddress, DIVIDEND_POOL_ABI, this.provider);\n            const result = await contract.getPoolStats();\n            console.log(\"[Blockchain] 分红池统计信息查询成功\");\n            return {\n                totalDividendPool: result._totalDividendPool.toString(),\n                totalClaimed: result._totalClaimed.toString(),\n                totalPending: result._totalPending.toString(),\n                totalDividendPerShare: result._totalDividendPerShare.toString()\n            };\n        } catch (error) {\n            const errorMsg = error.message;\n            console.error(\"[Blockchain] 查询分红池统计失败:\", errorMsg);\n            throw error;\n        }\n    }\n}\n/**\n * 创建区块链客户端实例\n */ function createBlockchainClient() {\n    const rpcUrl = process.env.BASE_SEPOLIA_RPC_URL;\n    const privateKey = process.env.DEPLOYER_PRIVATE_KEY;\n    const chainId = parseInt(process.env.CHAIN_ID || \"84532\");\n    if (!rpcUrl) {\n        throw new Error(\"BASE_SEPOLIA_RPC_URL environment variable is not set\");\n    }\n    if (!privateKey) {\n        throw new Error(\"DEPLOYER_PRIVATE_KEY environment variable is not set\");\n    }\n    return new BlockchainClient({\n        rpcUrl,\n        privateKey,\n        chainId\n    });\n}\n/**\n * 将字符串数字转换为 Wei（ERC20 标准通常是 18 位小数）\n * @param amount 数字（如 \"1\"）\n * @param decimals 小数位数（默认 18）\n * @returns Wei 格式的字符串\n */ function toWei(amount, decimals = 18) {\n    return ethers__WEBPACK_IMPORTED_MODULE_4__.parseUnits(amount, decimals).toString();\n}\n/**\n * 将 Wei 转换为字符串数字\n * @param wei Wei 格式的字符串\n * @param decimals 小数位数（默认 18）\n * @returns 普通数字字符串\n */ function fromWei(wei, decimals = 18) {\n    return ethers__WEBPACK_IMPORTED_MODULE_4__.formatUnits(wei, decimals);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/blockchain.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@ethersproject","vendor-chunks/bn.js","vendor-chunks/aes-js","vendor-chunks/hash.js","vendor-chunks/js-sha3","vendor-chunks/scrypt-js","vendor-chunks/bech32","vendor-chunks/inherits","vendor-chunks/minimalistic-assert"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdividend%2Fbalance%2Froute&page=%2Fapi%2Fdividend%2Fbalance%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdividend%2Fbalance%2Froute.ts&appDir=%2FUsers%2Fdaniel%2FCode%2F10_project%2FGame%2Fserver%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdaniel%2FCode%2F10_project%2FGame%2Fserver&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();