"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/subscription/activate/route";
exports.ids = ["app/api/subscription/activate/route"];
exports.modules = {

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mongodb");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsubscription%2Factivate%2Froute&page=%2Fapi%2Fsubscription%2Factivate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsubscription%2Factivate%2Froute.ts&appDir=%2FUsers%2Fdaniel%2FCode%2F10_project%2FGame%2Fserver%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdaniel%2FCode%2F10_project%2FGame%2Fserver&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsubscription%2Factivate%2Froute&page=%2Fapi%2Fsubscription%2Factivate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsubscription%2Factivate%2Froute.ts&appDir=%2FUsers%2Fdaniel%2FCode%2F10_project%2FGame%2Fserver%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdaniel%2FCode%2F10_project%2FGame%2Fserver&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_daniel_Code_10_project_Game_server_app_api_subscription_activate_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/subscription/activate/route.ts */ \"(rsc)/./app/api/subscription/activate/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/subscription/activate/route\",\n        pathname: \"/api/subscription/activate\",\n        filename: \"route\",\n        bundlePath: \"app/api/subscription/activate/route\"\n    },\n    resolvedPagePath: \"/Users/daniel/Code/10_project/Game/server/app/api/subscription/activate/route.ts\",\n    nextConfigOutput,\n    userland: _Users_daniel_Code_10_project_Game_server_app_api_subscription_activate_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/subscription/activate/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZzdWJzY3JpcHRpb24lMkZhY3RpdmF0ZSUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGc3Vic2NyaXB0aW9uJTJGYWN0aXZhdGUlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZzdWJzY3JpcHRpb24lMkZhY3RpdmF0ZSUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmRhbmllbCUyRkNvZGUlMkYxMF9wcm9qZWN0JTJGR2FtZSUyRnNlcnZlciUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZkYW5pZWwlMkZDb2RlJTJGMTBfcHJvamVjdCUyRkdhbWUlMkZzZXJ2ZXImaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ2dDO0FBQzdHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGdhbWUtYWkvc2VydmVyLz82ZGI5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9kYW5pZWwvQ29kZS8xMF9wcm9qZWN0L0dhbWUvc2VydmVyL2FwcC9hcGkvc3Vic2NyaXB0aW9uL2FjdGl2YXRlL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9zdWJzY3JpcHRpb24vYWN0aXZhdGUvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9zdWJzY3JpcHRpb24vYWN0aXZhdGVcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3N1YnNjcmlwdGlvbi9hY3RpdmF0ZS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9kYW5pZWwvQ29kZS8xMF9wcm9qZWN0L0dhbWUvc2VydmVyL2FwcC9hcGkvc3Vic2NyaXB0aW9uL2FjdGl2YXRlL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9zdWJzY3JpcHRpb24vYWN0aXZhdGUvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsubscription%2Factivate%2Froute&page=%2Fapi%2Fsubscription%2Factivate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsubscription%2Factivate%2Froute.ts&appDir=%2FUsers%2Fdaniel%2FCode%2F10_project%2FGame%2Fserver%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdaniel%2FCode%2F10_project%2FGame%2Fserver&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/subscription/activate/route.ts":
/*!************************************************!*\
  !*** ./app/api/subscription/activate/route.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OPTIONS: () => (/* binding */ OPTIONS),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_mongodb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/mongodb */ \"(rsc)/./lib/mongodb.ts\");\n/* harmony import */ var _lib_address_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/address-utils */ \"(rsc)/./lib/address-utils.ts\");\n/* harmony import */ var _lib_blockchain__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/blockchain */ \"(rsc)/./lib/blockchain.ts\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\");\n/**\n * 订阅激活 API 路由\n *\n * 功能：\n * 1. 验证链上交易\n * 2. 激活或续期订阅\n * 3. 返回新的到期时间\n *\n * 请求方式: POST /api/subscription/activate\n *\n * 请求体格式:\n * {\n *   \"userAddress\": \"0x...\",\n *   \"transactionHash\": \"0x...\",     // 支付交易哈希\n *   \"amount\": \"10\"                   // 支付金额（验证用）\n * }\n *\n * 响应格式:\n * {\n *   \"success\": true,\n *   \"expiresAt\": 1729876000,\n *   \"message\": \"订阅已激活，有效期30天\"\n * }\n */ \n\n\n\n\n// 订阅参数\nconst SUBSCRIPTION_AMOUNT = \"10\" // 10 $VIRTUAL\n;\nconst SUBSCRIPTION_PERIOD_DAYS = 30;\n/**\n * 验证链上交易\n * 连接到 Base RPC 验证交易是否有效\n */ async function verifyTransaction(transactionHash, userAddress, amount) {\n    try {\n        console.log(\"[Subscription Activate API] 验证交易...\");\n        console.log(\"[Subscription Activate API] 交易哈希:\", transactionHash);\n        console.log(\"[Subscription Activate API] 用户地址:\", userAddress);\n        console.log(\"[Subscription Activate API] 金额:\", amount);\n        // 基本格式验证\n        if (!/^0x[a-fA-F0-9]{64}$/.test(transactionHash)) {\n            console.warn(\"[Subscription Activate API] 交易哈希格式无效\");\n            return {\n                valid: false,\n                error: \"Invalid transaction hash format\"\n            };\n        }\n        // 使用 Base RPC 验证交易\n        const rpcUrl = process.env.BASE_SEPOLIA_RPC_URL || process.env.BASE_RPC_URL;\n        if (!rpcUrl) {\n            console.warn(\"[Subscription Activate API] RPC URL 未配置，跳过链上验证\");\n            // 开发环境中允许跳过链上验证，但只进行格式检查\n            return {\n                valid: true\n            };\n        }\n        try {\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_4__.JsonRpcProvider(rpcUrl);\n            console.log(\"[Subscription Activate API] 正在从 RPC 查询交易收据...\");\n            const receipt = await provider.getTransactionReceipt(transactionHash);\n            if (!receipt) {\n                console.warn(\"[Subscription Activate API] 交易尚未确认（收据不存在）\");\n                return {\n                    valid: false,\n                    error: \"Transaction not yet confirmed\"\n                };\n            }\n            console.log(\"[Subscription Activate API] 交易收据已获取，状态:\", receipt.status);\n            if (receipt.status === 0) {\n                console.warn(\"[Subscription Activate API] 交易失败\");\n                return {\n                    valid: false,\n                    error: \"Transaction failed on chain\"\n                };\n            }\n            console.log(\"[Subscription Activate API] 交易已验证，区块号:\", receipt.blockNumber);\n            return {\n                valid: true\n            };\n        } catch (rpcError) {\n            console.warn(\"[Subscription Activate API] RPC 查询失败:\", rpcError.message);\n            console.warn(\"[Subscription Activate API] 错误堆栈:\", rpcError.stack);\n            // 如果 RPC 查询失败，返回错误\n            return {\n                valid: false,\n                error: \"Failed to verify transaction on chain\"\n            };\n        }\n    } catch (error) {\n        console.error(\"[Subscription Activate API] 交易验证异常:\", error);\n        return {\n            valid: false,\n            error: \"Transaction verification error\"\n        };\n    }\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { userAddress, transactionHash, amount } = body;\n        // 参数验证\n        if (!userAddress || !transactionHash || !amount) {\n            console.warn(\"[Subscription Activate API] 缺少必需参数\");\n            return corsJson({\n                success: false,\n                error: \"Missing required parameters: userAddress, transactionHash, amount\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(\"[Subscription Activate API] 激活订阅请求，用户地址:\", userAddress);\n        // 验证地址格式\n        if (!(0,_lib_address_utils__WEBPACK_IMPORTED_MODULE_2__.isValidAddress)(userAddress)) {\n            console.warn(\"[Subscription Activate API] 无效的钱包地址:\", userAddress);\n            return corsJson({\n                success: false,\n                error: \"Invalid user address format\"\n            }, {\n                status: 400\n            });\n        }\n        const normalizedAddress = (0,_lib_address_utils__WEBPACK_IMPORTED_MODULE_2__.normalizeAddress)(userAddress);\n        // 验证金额\n        if (String(amount) !== SUBSCRIPTION_AMOUNT) {\n            console.warn(\"[Subscription Activate API] 无效的金额:\", amount, \"期望:\", SUBSCRIPTION_AMOUNT);\n            return corsJson({\n                success: false,\n                error: `Invalid amount. Expected ${SUBSCRIPTION_AMOUNT} $VIRTUAL, got ${amount}`\n            }, {\n                status: 400\n            });\n        }\n        // 验证交易\n        const txVerification = await verifyTransaction(transactionHash, normalizedAddress, amount);\n        if (!txVerification.valid) {\n            console.warn(\"[Subscription Activate API] 交易验证失败:\", txVerification.error);\n            return corsJson({\n                success: false,\n                error: \"Transaction verification failed\",\n                details: txVerification.error\n            }, {\n                status: 400\n            });\n        }\n        // 连接数据库\n        const db = await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.connectDB)();\n        // 计算新的到期时间（使用秒级 Unix 时间戳）\n        const now = Math.floor(Date.now() / 1000);\n        const expiresAt = now + SUBSCRIPTION_PERIOD_DAYS * 24 * 3600;\n        // 查询现有订阅\n        const existingSubscription = await db.collection(\"subscriptions\").findOne({\n            userAddress: normalizedAddress\n        });\n        let isRenewal = false;\n        if (existingSubscription) {\n            // 续期现有订阅\n            console.log(\"[Subscription Activate API] 续期现有订阅\");\n            await db.collection(\"subscriptions\").updateOne({\n                userAddress: normalizedAddress\n            }, {\n                $set: {\n                    status: \"active\",\n                    expiresAt,\n                    renewedAt: now,\n                    transactionHash,\n                    updatedAt: new Date()\n                }\n            });\n            isRenewal = true;\n        } else {\n            // 创建新订阅\n            console.log(\"[Subscription Activate API] 创建新订阅\");\n            await db.collection(\"subscriptions\").insertOne({\n                userAddress: normalizedAddress,\n                status: \"active\",\n                expiresAt,\n                startedAt: now,\n                renewedAt: now,\n                transactionHash,\n                createdAt: new Date(),\n                updatedAt: new Date()\n            });\n        }\n        console.log(\"[Subscription Activate API] 订阅\", isRenewal ? \"续期\" : \"激活\", \"成功，到期时间:\", new Date(expiresAt * 1000));\n        // 激活订阅成功后，调用合约更新分红\n        // 10 VIRTUAL 的 70% = 7 VIRTUAL 进入分红池\n        let dividendUpdateTxHash = null;\n        try {\n            const dividendPoolAddress = process.env.GAME_DIVIDEND_POOL_ADDRESS;\n            const dividendAmount = (0,_lib_blockchain__WEBPACK_IMPORTED_MODULE_3__.toWei)(\"7\") // 10 VIRTUAL 的 70%\n            ;\n            if (dividendPoolAddress) {\n                console.log(\"[Subscription Activate API] 准备更新分红池...\");\n                const blockchain = (0,_lib_blockchain__WEBPACK_IMPORTED_MODULE_3__.createBlockchainClient)();\n                const dividendTxResult = await blockchain.updateGameDividendPool(dividendPoolAddress, dividendAmount);\n                dividendUpdateTxHash = dividendTxResult.transactionHash;\n                console.log(\"[Subscription Activate API] 分红已更新，TX Hash:\", dividendUpdateTxHash);\n                // 可选：将 dividendUpdateTxHash 存储到数据库的订阅记录中\n                await db.collection(\"subscriptions\").updateOne({\n                    userAddress: normalizedAddress\n                }, {\n                    $set: {\n                        dividendUpdateTxHash,\n                        updatedAt: new Date()\n                    }\n                });\n            } else {\n                console.warn(\"[Subscription Activate API] GAME_DIVIDEND_POOL_ADDRESS 未配置，跳过分红更新\");\n            }\n        } catch (dividendError) {\n            console.error(\"[Subscription Activate API] 分红更新失败:\", dividendError);\n        // 不中断请求，订阅已经创建成功，分红更新可以后续重试\n        // 在实际生产环境中，可能需要添加重试机制或告警\n        }\n        return corsJson({\n            success: true,\n            expiresAt,\n            dividendUpdateTxHash,\n            message: isRenewal ? \"订阅已续期，有效期30天\" : \"订阅已激活，有效期30天\"\n        }, {\n            status: 200\n        });\n    } catch (error) {\n        console.error(\"[Subscription Activate API] 处理请求失败:\", error);\n        return corsJson({\n            success: false,\n            error: \"Failed to activate subscription\",\n            details: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * 处理 OPTIONS 请求（用于 CORS 预检）\n */ async function OPTIONS() {\n    return corsJson(null, {\n        status: 200\n    });\n}\nfunction corsJson(body, init) {\n    const response = body === null ? new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(null, init) : next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(body, init);\n    response.headers.set(\"Access-Control-Allow-Origin\", \"*\");\n    response.headers.set(\"Access-Control-Allow-Methods\", \"POST, OPTIONS\");\n    response.headers.set(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\n    response.headers.set(\"Access-Control-Allow-Credentials\", \"true\");\n    return response;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/subscription/activate/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/address-utils.ts":
/*!******************************!*\
  !*** ./lib/address-utils.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isValidAddress: () => (/* binding */ isValidAddress),\n/* harmony export */   isValidTransactionHash: () => (/* binding */ isValidTransactionHash),\n/* harmony export */   normalizeAddress: () => (/* binding */ normalizeAddress)\n/* harmony export */ });\n/**\n * 地址验证和规范化工具\n * 独立于 ethers，避免 Next.js 兼容性问题\n */ /**\n * 验证是否为有效的以太坊地址\n * @param address 地址字符串\n * @returns 是否有效\n */ function isValidAddress(address) {\n    return /^0x[a-fA-F0-9]{40}$/.test(address);\n}\n/**\n * 规范化地址为小写格式\n * @param address 地址字符串\n * @returns 规范化后的地址\n */ function normalizeAddress(address) {\n    if (!isValidAddress(address)) {\n        throw new Error(\"Invalid address format\");\n    }\n    return address.toLowerCase();\n}\n/**\n * 验证交易哈希格式\n * @param hash 交易哈希\n * @returns 是否有效\n */ function isValidTransactionHash(hash) {\n    return /^0x[a-fA-F0-9]{64}$/.test(hash);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvYWRkcmVzcy11dGlscy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7O0NBR0MsR0FFRDs7OztDQUlDLEdBQ00sU0FBU0EsZUFBZUMsT0FBZTtJQUM1QyxPQUFPLHNCQUFzQkMsSUFBSSxDQUFDRDtBQUNwQztBQUVBOzs7O0NBSUMsR0FDTSxTQUFTRSxpQkFBaUJGLE9BQWU7SUFDOUMsSUFBSSxDQUFDRCxlQUFlQyxVQUFVO1FBQzVCLE1BQU0sSUFBSUcsTUFBTTtJQUNsQjtJQUNBLE9BQU9ILFFBQVFJLFdBQVc7QUFDNUI7QUFFQTs7OztDQUlDLEdBQ00sU0FBU0MsdUJBQXVCQyxJQUFZO0lBQ2pELE9BQU8sc0JBQXNCTCxJQUFJLENBQUNLO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGdhbWUtYWkvc2VydmVyLy4vbGliL2FkZHJlc3MtdXRpbHMudHM/NjNmMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIOWcsOWdgOmqjOivgeWSjOinhOiMg+WMluW3peWFt1xuICog54us56uL5LqOIGV0aGVyc++8jOmBv+WFjSBOZXh0LmpzIOWFvOWuueaAp+mXrumimFxuICovXG5cbi8qKlxuICog6aqM6K+B5piv5ZCm5Li65pyJ5pWI55qE5Lul5aSq5Z2K5Zyw5Z2AXG4gKiBAcGFyYW0gYWRkcmVzcyDlnLDlnYDlrZfnrKbkuLJcbiAqIEByZXR1cm5zIOaYr+WQpuacieaViFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZEFkZHJlc3MoYWRkcmVzczogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiAvXjB4W2EtZkEtRjAtOV17NDB9JC8udGVzdChhZGRyZXNzKVxufVxuXG4vKipcbiAqIOinhOiMg+WMluWcsOWdgOS4uuWwj+WGmeagvOW8j1xuICogQHBhcmFtIGFkZHJlc3Mg5Zyw5Z2A5a2X56ym5LiyXG4gKiBAcmV0dXJucyDop4TojIPljJblkI7nmoTlnLDlnYBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUFkZHJlc3MoYWRkcmVzczogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKCFpc1ZhbGlkQWRkcmVzcyhhZGRyZXNzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhZGRyZXNzIGZvcm1hdCcpXG4gIH1cbiAgcmV0dXJuIGFkZHJlc3MudG9Mb3dlckNhc2UoKVxufVxuXG4vKipcbiAqIOmqjOivgeS6pOaYk+WTiOW4jOagvOW8j1xuICogQHBhcmFtIGhhc2gg5Lqk5piT5ZOI5biMXG4gKiBAcmV0dXJucyDmmK/lkKbmnInmlYhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRUcmFuc2FjdGlvbkhhc2goaGFzaDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiAvXjB4W2EtZkEtRjAtOV17NjR9JC8udGVzdChoYXNoKVxufVxuIl0sIm5hbWVzIjpbImlzVmFsaWRBZGRyZXNzIiwiYWRkcmVzcyIsInRlc3QiLCJub3JtYWxpemVBZGRyZXNzIiwiRXJyb3IiLCJ0b0xvd2VyQ2FzZSIsImlzVmFsaWRUcmFuc2FjdGlvbkhhc2giLCJoYXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/address-utils.ts\n");

/***/ }),

/***/ "(rsc)/./lib/blockchain.ts":
/*!***************************!*\
  !*** ./lib/blockchain.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlockchainClient: () => (/* binding */ BlockchainClient),\n/* harmony export */   createBlockchainClient: () => (/* binding */ createBlockchainClient),\n/* harmony export */   fromWei: () => (/* binding */ fromWei),\n/* harmony export */   toWei: () => (/* binding */ toWei)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/@ethersproject/wallet/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/@ethersproject/units/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/@ethersproject/abi/lib.esm/interface.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/@ethersproject/contracts/lib.esm/index.js\");\n/**\n * 区块链交互模块\n * 用于与智能合约交互，进行代币转账等操作\n */ \n/**\n * IERC20 标准接口 ABI\n */ const ERC20_ABI = [\n    \"function transfer(address to, uint256 amount) public returns (bool)\",\n    \"function balanceOf(address account) public view returns (uint256)\",\n    \"function approve(address spender, uint256 amount) public returns (bool)\",\n    \"function allowance(address owner, address spender) public view returns (uint256)\"\n];\n/**\n * GameDividendPool 合约 ABI（只需要调用的方法）\n */ const DIVIDEND_POOL_ABI = [\n    \"function depositDividend(uint256 amount) external\",\n    \"function claimDividend() external nonReentrant returns (uint256 claimable)\",\n    \"function getPendingDividend(address user) external view returns (uint256)\",\n    \"function getUserDividendInfo(address user) external view returns (uint256 pending, uint256 claimed, uint256 gameBalance)\",\n    \"function getPoolStats() external view returns (uint256 _totalDividendPool, uint256 _totalClaimed, uint256 _totalPending, uint256 _totalDividendPerShare)\"\n];\n/**\n * 区块链客户端类\n */ class BlockchainClient {\n    provider;\n    signer;\n    rpcUrl;\n    privateKey;\n    constructor(config){\n        this.rpcUrl = config.rpcUrl;\n        this.privateKey = config.privateKey;\n        this.provider = new ethers__WEBPACK_IMPORTED_MODULE_0__.JsonRpcProvider(config.rpcUrl);\n        this.signer = new ethers__WEBPACK_IMPORTED_MODULE_1__.Wallet(config.privateKey, this.provider);\n    // 注意：chainId 目前未使用，可在未来需要时启用\n    }\n    /**\n   * 执行原始 JSON-RPC 调用\n   */ async callJsonRpc(method, params) {\n        const response = await fetch(this.rpcUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                jsonrpc: \"2.0\",\n                id: Date.now(),\n                method,\n                params\n            })\n        });\n        const data = await response.json();\n        if (data.error) {\n            throw new Error(`JSON-RPC Error: ${data.error.message}`);\n        }\n        return data.result;\n    }\n    /**\n   * 转账 ERC20 代币\n   * @param tokenAddress 代币合约地址\n   * @param toAddress 接收地址\n   * @param amount 转账数量（单位：Wei）\n   * @returns 交易哈希\n   */ async transferERC20(tokenAddress, toAddress, amount) {\n        try {\n            console.log(\"[Blockchain] 准备转账 ERC20 代币\");\n            console.log(\"[Blockchain] 代币地址:\", tokenAddress);\n            console.log(\"[Blockchain] 接收地址:\", toAddress);\n            console.log(\"[Blockchain] 转账数量:\", amount);\n            // 验证地址格式\n            if (!ethers__WEBPACK_IMPORTED_MODULE_2__.isAddress(tokenAddress)) {\n                throw new Error(\"Invalid token address format\");\n            }\n            if (!ethers__WEBPACK_IMPORTED_MODULE_2__.isAddress(toAddress)) {\n                throw new Error(\"Invalid recipient address format\");\n            }\n            // 使用底层JSON-RPC调用而不是ethers.js Contract接口\n            // 以避免网络检测的问题\n            console.log(\"[Blockchain] 使用 JSON-RPC 构建转账交易...\");\n            // 创建钱包用于签名\n            const wallet = new ethers__WEBPACK_IMPORTED_MODULE_1__.Wallet(this.privateKey);\n            // 使用直接的 JSON-RPC 调用而不是通过 provider 接口\n            // 这样可以避免 ethers.js 的网络检测问题\n            console.log(\"[Blockchain] 通过原始 JSON-RPC 获取交易数据...\");\n            let nonce;\n            let gasPriceWei;\n            try {\n                // 直接调用 JSON-RPC\n                const nonceHex = await this.callJsonRpc(\"eth_getTransactionCount\", [\n                    wallet.address,\n                    \"latest\"\n                ]);\n                nonce = parseInt(nonceHex, 16);\n                console.log(\"[Blockchain] 获取 Nonce:\", nonce);\n            } catch (error) {\n                console.warn(\"[Blockchain] 无法获取 Nonce，使用默认值 0\");\n                nonce = 0;\n            }\n            try {\n                const gasPriceHex = await this.callJsonRpc(\"eth_gasPrice\", []);\n                gasPriceWei = ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(gasPriceHex);\n                console.log(\"[Blockchain] 获取 Gas Price:\", ethers__WEBPACK_IMPORTED_MODULE_4__.formatUnits(gasPriceWei, \"gwei\"), \"gwei\");\n            } catch (error) {\n                console.warn(\"[Blockchain] 无法获取 Gas Price，使用默认值 1 gwei\");\n                gasPriceWei = ethers__WEBPACK_IMPORTED_MODULE_4__.parseUnits(\"1\", \"gwei\");\n            }\n            const gasLimit = ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(\"100000\");\n            console.log(\"[Blockchain] 交易参数:\");\n            console.log(\"  • Nonce:\", nonce);\n            console.log(\"  • Gas Price:\", ethers__WEBPACK_IMPORTED_MODULE_4__.formatUnits(gasPriceWei, \"gwei\"), \"gwei\");\n            console.log(\"  • Gas Limit:\", gasLimit.toString());\n            // 构建 transfer() 函数调用数据\n            const iface = new ethers__WEBPACK_IMPORTED_MODULE_5__.Interface(ERC20_ABI);\n            const data = iface.encodeFunctionData(\"transfer\", [\n                toAddress,\n                amount\n            ]);\n            // 构建交易对象\n            const tx = {\n                to: tokenAddress,\n                from: wallet.address,\n                nonce: nonce,\n                gasLimit: gasLimit,\n                gasPrice: gasPriceWei,\n                data: data\n            };\n            console.log(\"[Blockchain] 签名交易...\");\n            // 签名交易\n            const signedTx = await wallet.signTransaction(tx);\n            console.log(\"[Blockchain] 发送签名的交易到网络...\");\n            // 直接通过 JSON-RPC 发送原始交易，避免 provider 的网络检测\n            const txHash = await this.callJsonRpc(\"eth_sendRawTransaction\", [\n                signedTx\n            ]);\n            console.log(\"[Blockchain] 交易已发送，Hash:\", txHash);\n            console.log(\"[Blockchain] 等待交易确认...\");\n            // 等待交易确认（最多等待 60 秒）\n            const maxAttempts = 30;\n            let receipt = null;\n            for(let i = 0; i < maxAttempts; i++){\n                try {\n                    const receiptData = await this.callJsonRpc(\"eth_getTransactionReceipt\", [\n                        txHash\n                    ]);\n                    if (receiptData) {\n                        receipt = receiptData;\n                        console.log(\"[Blockchain] 交易已确认，区块号:\", parseInt(receiptData.blockNumber, 16));\n                        break;\n                    }\n                } catch (error) {\n                    console.warn(\"[Blockchain] 等待确认中...\", i + 1);\n                }\n                // 等待 2 秒后重试\n                await new Promise((resolve)=>setTimeout(resolve, 2000));\n            }\n            return {\n                transactionHash: txHash,\n                blockNumber: receipt ? parseInt(receipt.blockNumber, 16) : undefined\n            };\n        } catch (error) {\n            const errorMsg = error.message;\n            console.error(\"[Blockchain] 转账失败:\", errorMsg);\n            throw error;\n        }\n    }\n    /**\n   * 检查 ERC20 代币余额\n   * @param tokenAddress 代币合约地址\n   * @param address 账户地址\n   * @returns 余额（单位：Wei）\n   */ async getERC20Balance(tokenAddress, address) {\n        try {\n            const tokenContract = new ethers__WEBPACK_IMPORTED_MODULE_6__.Contract(tokenAddress, ERC20_ABI, this.provider);\n            const balance = await tokenContract.balanceOf(address);\n            return balance.toString();\n        } catch (error) {\n            console.error(\"[Blockchain] 查询余额失败:\", error);\n            throw error;\n        }\n    }\n    /**\n   * 获取 Deployer 地址\n   */ async getSignerAddress() {\n        return await this.signer.getAddress();\n    }\n    /**\n   * 获取网络信息\n   */ async getNetworkInfo() {\n        const network = await this.provider.getNetwork();\n        return {\n            chainId: network.chainId,\n            name: network.name\n        };\n    }\n    /**\n   * 调用 GameDividendPool 的 depositDividend 方法，更新分红\n   * @param dividendPoolAddress 分红池合约地址\n   * @param amount VIRTUAL 代币金额（Wei 单位）\n   * @returns 交易哈希\n   */ async updateGameDividendPool(dividendPoolAddress, amount) {\n        try {\n            console.log(\"[Blockchain] 准备调用 GameDividendPool.depositDividend()\");\n            console.log(\"[Blockchain] 分红池地址:\", dividendPoolAddress);\n            console.log(\"[Blockchain] 分红金额:\", amount);\n            // 验证地址格式\n            if (!ethers__WEBPACK_IMPORTED_MODULE_2__.isAddress(dividendPoolAddress)) {\n                throw new Error(\"Invalid dividend pool address format\");\n            }\n            // 创建钱包用于签名\n            const wallet = new ethers__WEBPACK_IMPORTED_MODULE_1__.Wallet(this.privateKey);\n            let nonce;\n            let gasPriceWei;\n            try {\n                const nonceHex = await this.callJsonRpc(\"eth_getTransactionCount\", [\n                    wallet.address,\n                    \"latest\"\n                ]);\n                nonce = parseInt(nonceHex, 16);\n                console.log(\"[Blockchain] 获取 Nonce:\", nonce);\n            } catch (error) {\n                console.warn(\"[Blockchain] 无法获取 Nonce，使用默认值 0\");\n                nonce = 0;\n            }\n            try {\n                const gasPriceHex = await this.callJsonRpc(\"eth_gasPrice\", []);\n                gasPriceWei = ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(gasPriceHex);\n                console.log(\"[Blockchain] 获取 Gas Price:\", ethers__WEBPACK_IMPORTED_MODULE_4__.formatUnits(gasPriceWei, \"gwei\"), \"gwei\");\n            } catch (error) {\n                console.warn(\"[Blockchain] 无法获取 Gas Price，使用默认值 1 gwei\");\n                gasPriceWei = ethers__WEBPACK_IMPORTED_MODULE_4__.parseUnits(\"1\", \"gwei\");\n            }\n            const gasLimit = ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(\"150000\") // depositDividend 需要更多 gas\n            ;\n            console.log(\"[Blockchain] 交易参数:\");\n            console.log(\"  • Nonce:\", nonce);\n            console.log(\"  • Gas Price:\", ethers__WEBPACK_IMPORTED_MODULE_4__.formatUnits(gasPriceWei, \"gwei\"), \"gwei\");\n            console.log(\"  • Gas Limit:\", gasLimit.toString());\n            // 需要先调用 VIRTUAL 代币的 approve，授权 dividendPool 使用我们的代币\n            console.log(\"[Blockchain] 构建 approve 交易...\");\n            const virtualTokenAddress = process.env.VIRTUAL_TOKEN_ADDRESS;\n            if (!virtualTokenAddress) {\n                throw new Error(\"VIRTUAL_TOKEN_ADDRESS environment variable is not set\");\n            }\n            // 构建 approve 交易数据\n            const iface = new ethers__WEBPACK_IMPORTED_MODULE_5__.Interface(ERC20_ABI);\n            const approveData = iface.encodeFunctionData(\"approve\", [\n                dividendPoolAddress,\n                amount\n            ]);\n            const approveTx = {\n                to: virtualTokenAddress,\n                from: wallet.address,\n                nonce: nonce,\n                gasLimit: ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(\"100000\"),\n                gasPrice: gasPriceWei,\n                data: approveData\n            };\n            console.log(\"[Blockchain] 签名 approve 交易...\");\n            const signedApproveTx = await wallet.signTransaction(approveTx);\n            console.log(\"[Blockchain] 发送 approve 交易...\");\n            const approveTxHash = await this.callJsonRpc(\"eth_sendRawTransaction\", [\n                signedApproveTx\n            ]);\n            console.log(\"[Blockchain] Approve 交易已发送，Hash:\", approveTxHash);\n            // 等待 approve 交易确认\n            console.log(\"[Blockchain] 等待 approve 交易确认...\");\n            for(let i = 0; i < 30; i++){\n                try {\n                    const receiptData = await this.callJsonRpc(\"eth_getTransactionReceipt\", [\n                        approveTxHash\n                    ]);\n                    if (receiptData) {\n                        console.log(\"[Blockchain] Approve 交易已确认\");\n                        break;\n                    }\n                } catch (error) {\n                    console.warn(\"[Blockchain] 等待 approve 确认中...\", i + 1);\n                }\n                await new Promise((resolve)=>setTimeout(resolve, 2000));\n            }\n            // 现在构建 depositDividend 交易\n            console.log(\"[Blockchain] 构建 depositDividend 交易...\");\n            const depositIface = new ethers__WEBPACK_IMPORTED_MODULE_5__.Interface(DIVIDEND_POOL_ABI);\n            const depositData = depositIface.encodeFunctionData(\"depositDividend\", [\n                amount\n            ]);\n            const depositTx = {\n                to: dividendPoolAddress,\n                from: wallet.address,\n                nonce: nonce + 1,\n                gasLimit: ethers__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(\"150000\"),\n                gasPrice: gasPriceWei,\n                data: depositData\n            };\n            console.log(\"[Blockchain] 签名 depositDividend 交易...\");\n            const signedDepositTx = await wallet.signTransaction(depositTx);\n            console.log(\"[Blockchain] 发送 depositDividend 交易...\");\n            const depositTxHash = await this.callJsonRpc(\"eth_sendRawTransaction\", [\n                signedDepositTx\n            ]);\n            console.log(\"[Blockchain] Deposit 交易已发送，Hash:\", depositTxHash);\n            // 等待 deposit 交易确认\n            console.log(\"[Blockchain] 等待 depositDividend 交易确认...\");\n            let receipt = null;\n            for(let i = 0; i < 30; i++){\n                try {\n                    const receiptData = await this.callJsonRpc(\"eth_getTransactionReceipt\", [\n                        depositTxHash\n                    ]);\n                    if (receiptData) {\n                        receipt = receiptData;\n                        console.log(\"[Blockchain] Deposit 交易已确认，区块号:\", parseInt(receiptData.blockNumber, 16));\n                        break;\n                    }\n                } catch (error) {\n                    console.warn(\"[Blockchain] 等待 deposit 确认中...\", i + 1);\n                }\n                await new Promise((resolve)=>setTimeout(resolve, 2000));\n            }\n            return {\n                transactionHash: depositTxHash,\n                blockNumber: receipt ? parseInt(receipt.blockNumber, 16) : undefined\n            };\n        } catch (error) {\n            const errorMsg = error.message;\n            console.error(\"[Blockchain] 分红更新失败:\", errorMsg);\n            throw error;\n        }\n    }\n    /**\n   * 查询用户的分红信息\n   * @param dividendPoolAddress 分红池合约地址\n   * @param userAddress 用户地址\n   * @returns 用户分红信息\n   */ async getUserDividendInfo(dividendPoolAddress, userAddress) {\n        try {\n            console.log(\"[Blockchain] 查询用户分红信息\");\n            console.log(\"[Blockchain] 分红池地址:\", dividendPoolAddress);\n            console.log(\"[Blockchain] 用户地址:\", userAddress);\n            // 验证地址格式\n            if (!ethers__WEBPACK_IMPORTED_MODULE_2__.isAddress(dividendPoolAddress)) {\n                throw new Error(\"Invalid dividend pool address format\");\n            }\n            if (!ethers__WEBPACK_IMPORTED_MODULE_2__.isAddress(userAddress)) {\n                throw new Error(\"Invalid user address format\");\n            }\n            // 创建合约实例并调用 view 函数\n            const contract = new ethers__WEBPACK_IMPORTED_MODULE_6__.Contract(dividendPoolAddress, DIVIDEND_POOL_ABI, this.provider);\n            const result = await contract.getUserDividendInfo(userAddress);\n            console.log(\"[Blockchain] 用户分红信息查询成功\");\n            console.log(\"[Blockchain] 待提取分红:\", result.pending.toString());\n            console.log(\"[Blockchain] 已提取分红:\", result.claimed.toString());\n            console.log(\"[Blockchain] GAME 余额:\", result.gameBalance.toString());\n            return {\n                pending: result.pending.toString(),\n                claimed: result.claimed.toString(),\n                gameBalance: result.gameBalance.toString()\n            };\n        } catch (error) {\n            const errorMsg = error.message;\n            console.error(\"[Blockchain] 查询分红信息失败:\", errorMsg);\n            throw error;\n        }\n    }\n    /**\n   * 查询分红池的统计数据\n   * @param dividendPoolAddress 分红池合约地址\n   * @returns 分红池统计信息\n   */ async getDividendPoolStats(dividendPoolAddress) {\n        try {\n            console.log(\"[Blockchain] 查询分红池统计信息\");\n            // 验证地址格式\n            if (!ethers__WEBPACK_IMPORTED_MODULE_2__.isAddress(dividendPoolAddress)) {\n                throw new Error(\"Invalid dividend pool address format\");\n            }\n            const contract = new ethers__WEBPACK_IMPORTED_MODULE_6__.Contract(dividendPoolAddress, DIVIDEND_POOL_ABI, this.provider);\n            const result = await contract.getPoolStats();\n            console.log(\"[Blockchain] 分红池统计信息查询成功\");\n            return {\n                totalDividendPool: result._totalDividendPool.toString(),\n                totalClaimed: result._totalClaimed.toString(),\n                totalPending: result._totalPending.toString(),\n                totalDividendPerShare: result._totalDividendPerShare.toString()\n            };\n        } catch (error) {\n            const errorMsg = error.message;\n            console.error(\"[Blockchain] 查询分红池统计失败:\", errorMsg);\n            throw error;\n        }\n    }\n}\n/**\n * 创建区块链客户端实例\n */ function createBlockchainClient() {\n    const rpcUrl = process.env.BASE_SEPOLIA_RPC_URL;\n    const privateKey = process.env.DEPLOYER_PRIVATE_KEY;\n    const chainId = parseInt(process.env.CHAIN_ID || \"84532\");\n    if (!rpcUrl) {\n        throw new Error(\"BASE_SEPOLIA_RPC_URL environment variable is not set\");\n    }\n    if (!privateKey) {\n        throw new Error(\"DEPLOYER_PRIVATE_KEY environment variable is not set\");\n    }\n    return new BlockchainClient({\n        rpcUrl,\n        privateKey,\n        chainId\n    });\n}\n/**\n * 将字符串数字转换为 Wei（ERC20 标准通常是 18 位小数）\n * @param amount 数字（如 \"1\"）\n * @param decimals 小数位数（默认 18）\n * @returns Wei 格式的字符串\n */ function toWei(amount, decimals = 18) {\n    return ethers__WEBPACK_IMPORTED_MODULE_4__.parseUnits(amount, decimals).toString();\n}\n/**\n * 将 Wei 转换为字符串数字\n * @param wei Wei 格式的字符串\n * @param decimals 小数位数（默认 18）\n * @returns 普通数字字符串\n */ function fromWei(wei, decimals = 18) {\n    return ethers__WEBPACK_IMPORTED_MODULE_4__.formatUnits(wei, decimals);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/blockchain.ts\n");

/***/ }),

/***/ "(rsc)/./lib/mongodb.ts":
/*!************************!*\
  !*** ./lib/mongodb.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanupExpiredSubscriptions: () => (/* binding */ cleanupExpiredSubscriptions),\n/* harmony export */   closeDB: () => (/* binding */ closeDB),\n/* harmony export */   connectDB: () => (/* binding */ connectDB),\n/* harmony export */   getDB: () => (/* binding */ getDB),\n/* harmony export */   initializeDatabase: () => (/* binding */ initializeDatabase)\n/* harmony export */ });\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * MongoDB 连接管理模块\n * 使用单例模式缓存连接，避免每次重复连接\n */ \nconst MONGODB_URI = process.env.MONGODB_URI || \"mongodb://localhost:27017\";\nconst MONGODB_DB_NAME = process.env.MONGODB_DB_NAME || \"game-ai\";\n/**\n * 缓存的连接实例\n */ let cachedClient = null;\nlet cachedDb = null;\n/**\n * 连接到 MongoDB\n * 使用单例模式确保只创建一个连接\n */ async function connectDB() {\n    // 如果已有连接，直接返回\n    if (cachedClient && cachedDb) {\n        console.log(\"[MongoDB] 使用缓存连接\");\n        return cachedDb;\n    }\n    try {\n        console.log(\"[MongoDB] 正在连接...\");\n        const client = new mongodb__WEBPACK_IMPORTED_MODULE_0__.MongoClient(MONGODB_URI, {\n            maxPoolSize: 10,\n            minPoolSize: 2,\n            maxIdleTimeMS: 60000\n        });\n        await client.connect();\n        console.log(\"[MongoDB] 连接成功\");\n        // 获取数据库实例\n        const db = client.db(MONGODB_DB_NAME);\n        // 缓存连接和数据库实例\n        cachedClient = client;\n        cachedDb = db;\n        return db;\n    } catch (error) {\n        console.error(\"[MongoDB] 连接失败:\", error);\n        throw error;\n    }\n}\n/**\n * 关闭 MongoDB 连接\n */ async function closeDB() {\n    if (cachedClient) {\n        await cachedClient.close();\n        cachedClient = null;\n        cachedDb = null;\n        console.log(\"[MongoDB] 连接已关闭\");\n    }\n}\n/**\n * 获取当前数据库实例\n */ function getDB() {\n    if (!cachedDb) {\n        throw new Error(\"Database not connected. Call connectDB() first.\");\n    }\n    return cachedDb;\n}\n/**\n * 创建必要的集合和索引\n */ async function initializeDatabase() {\n    try {\n        const db = await connectDB();\n        console.log(\"[MongoDB] 初始化数据库...\");\n        // 创建 subscriptions 集合\n        try {\n            await db.createCollection(\"subscriptions\");\n            console.log(\"[MongoDB] subscriptions 集合已创建\");\n        } catch (error) {\n            if (error.code === 48) {\n                // 集合已存在\n                console.log(\"[MongoDB] subscriptions 集合已存在\");\n            } else {\n                throw error;\n            }\n        }\n        // 创建 subscriptions 索引\n        await db.collection(\"subscriptions\").createIndex({\n            userAddress: 1\n        }, {\n            unique: true\n        });\n        console.log(\"[MongoDB] subscriptions.userAddress 唯一索引已创建\");\n        await db.collection(\"subscriptions\").createIndex({\n            expiresAt: 1\n        });\n        console.log(\"[MongoDB] subscriptions.expiresAt 索引已创建\");\n        await db.collection(\"subscriptions\").createIndex({\n            status: 1\n        });\n        console.log(\"[MongoDB] subscriptions.status 索引已创建\");\n        // 创建 chat_logs 集合（可选）\n        try {\n            await db.createCollection(\"chat_logs\");\n            console.log(\"[MongoDB] chat_logs 集合已创建\");\n        } catch (error) {\n            if (error.code === 48) {\n                console.log(\"[MongoDB] chat_logs 集合已存在\");\n            } else {\n                throw error;\n            }\n        }\n        // 创建 chat_logs 索引\n        await db.collection(\"chat_logs\").createIndex({\n            userAddress: 1\n        });\n        console.log(\"[MongoDB] chat_logs.userAddress 索引已创建\");\n        await db.collection(\"chat_logs\").createIndex({\n            timestamp: 1\n        });\n        console.log(\"[MongoDB] chat_logs.timestamp 索引已创建\");\n        // 创建 gameContent 集合\n        try {\n            await db.createCollection(\"gameContent\");\n            console.log(\"[MongoDB] gameContent 集合已创建\");\n        } catch (error) {\n            if (error.code === 48) {\n                console.log(\"[MongoDB] gameContent 集合已存在\");\n            } else {\n                throw error;\n            }\n        }\n        // 创建 gameContent 索引\n        await db.collection(\"gameContent\").createIndex({\n            contentId: 1\n        }, {\n            unique: true\n        });\n        console.log(\"[MongoDB] gameContent.contentId 唯一索引已创建\");\n        await db.collection(\"gameContent\").createIndex({\n            userAddress: 1\n        });\n        console.log(\"[MongoDB] gameContent.userAddress 索引已创建\");\n        await db.collection(\"gameContent\").createIndex({\n            gameTitle: 1\n        });\n        console.log(\"[MongoDB] gameContent.gameTitle 索引已创建\");\n        await db.collection(\"gameContent\").createIndex({\n            createdAt: 1\n        });\n        console.log(\"[MongoDB] gameContent.createdAt 索引已创建\");\n        // 创建 dividendWithdrawals 集合\n        try {\n            await db.createCollection(\"dividendWithdrawals\");\n            console.log(\"[MongoDB] dividendWithdrawals 集合已创建\");\n        } catch (error) {\n            if (error.code === 48) {\n                console.log(\"[MongoDB] dividendWithdrawals 集合已存在\");\n            } else {\n                throw error;\n            }\n        }\n        // 创建 dividendWithdrawals 索引\n        await db.collection(\"dividendWithdrawals\").createIndex({\n            withdrawalId: 1\n        }, {\n            unique: true\n        });\n        console.log(\"[MongoDB] dividendWithdrawals.withdrawalId 唯一索引已创建\");\n        await db.collection(\"dividendWithdrawals\").createIndex({\n            userAddress: 1\n        });\n        console.log(\"[MongoDB] dividendWithdrawals.userAddress 索引已创建\");\n        await db.collection(\"dividendWithdrawals\").createIndex({\n            transactionHash: 1\n        });\n        console.log(\"[MongoDB] dividendWithdrawals.transactionHash 索引已创建\");\n        await db.collection(\"dividendWithdrawals\").createIndex({\n            createdAt: 1\n        });\n        console.log(\"[MongoDB] dividendWithdrawals.createdAt 索引已创建\");\n        await db.collection(\"dividendWithdrawals\").createIndex({\n            status: 1\n        });\n        console.log(\"[MongoDB] dividendWithdrawals.status 索引已创建\");\n        console.log(\"[MongoDB] 数据库初始化完成\");\n    } catch (error) {\n        console.error(\"[MongoDB] 初始化失败:\", error);\n        throw error;\n    }\n}\n/**\n * 清理过期的订阅\n * 定期调用此函数删除已过期的订阅记录\n */ async function cleanupExpiredSubscriptions() {\n    try {\n        const db = await connectDB();\n        const now = Math.floor(Date.now() / 1000);\n        const result = await db.collection(\"subscriptions\").deleteMany({\n            expiresAt: {\n                $lt: now\n            },\n            status: \"inactive\"\n        });\n        console.log(`[MongoDB] 已清理 ${result.deletedCount} 条过期订阅记录`);\n        return result.deletedCount;\n    } catch (error) {\n        console.error(\"[MongoDB] 清理过期订阅失败:\", error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvbW9uZ29kYi50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7OztDQUdDLEdBRXdDO0FBRXpDLE1BQU1DLGNBQWNDLFFBQVFDLEdBQUcsQ0FBQ0YsV0FBVyxJQUFJO0FBQy9DLE1BQU1HLGtCQUFrQkYsUUFBUUMsR0FBRyxDQUFDQyxlQUFlLElBQUk7QUFFdkQ7O0NBRUMsR0FDRCxJQUFJQyxlQUFtQztBQUN2QyxJQUFJQyxXQUFzQjtBQUUxQjs7O0NBR0MsR0FDTSxlQUFlQztJQUNwQixjQUFjO0lBQ2QsSUFBSUYsZ0JBQWdCQyxVQUFVO1FBQzVCRSxRQUFRQyxHQUFHLENBQUM7UUFDWixPQUFPSDtJQUNUO0lBRUEsSUFBSTtRQUNGRSxRQUFRQyxHQUFHLENBQUM7UUFFWixNQUFNQyxTQUFTLElBQUlWLGdEQUFXQSxDQUFDQyxhQUFjO1lBQzNDVSxhQUFhO1lBQ2JDLGFBQWE7WUFDYkMsZUFBZTtRQUNqQjtRQUVBLE1BQU1ILE9BQU9JLE9BQU87UUFDcEJOLFFBQVFDLEdBQUcsQ0FBQztRQUVaLFVBQVU7UUFDVixNQUFNTSxLQUFLTCxPQUFPSyxFQUFFLENBQUNYO1FBRXJCLGFBQWE7UUFDYkMsZUFBZUs7UUFDZkosV0FBV1M7UUFFWCxPQUFPQTtJQUNULEVBQUUsT0FBT0MsT0FBTztRQUNkUixRQUFRUSxLQUFLLENBQUMsbUJBQW1CQTtRQUNqQyxNQUFNQTtJQUNSO0FBQ0Y7QUFFQTs7Q0FFQyxHQUNNLGVBQWVDO0lBQ3BCLElBQUlaLGNBQWM7UUFDaEIsTUFBTUEsYUFBYWEsS0FBSztRQUN4QmIsZUFBZTtRQUNmQyxXQUFXO1FBQ1hFLFFBQVFDLEdBQUcsQ0FBQztJQUNkO0FBQ0Y7QUFFQTs7Q0FFQyxHQUNNLFNBQVNVO0lBQ2QsSUFBSSxDQUFDYixVQUFVO1FBQ2IsTUFBTSxJQUFJYyxNQUFNO0lBQ2xCO0lBQ0EsT0FBT2Q7QUFDVDtBQUVBOztDQUVDLEdBQ00sZUFBZWU7SUFDcEIsSUFBSTtRQUNGLE1BQU1OLEtBQUssTUFBTVI7UUFFakJDLFFBQVFDLEdBQUcsQ0FBQztRQUVaLHNCQUFzQjtRQUN0QixJQUFJO1lBQ0YsTUFBTU0sR0FBR08sZ0JBQWdCLENBQUM7WUFDMUJkLFFBQVFDLEdBQUcsQ0FBQztRQUNkLEVBQUUsT0FBT08sT0FBWTtZQUNuQixJQUFJQSxNQUFNTyxJQUFJLEtBQUssSUFBSTtnQkFDckIsUUFBUTtnQkFDUmYsUUFBUUMsR0FBRyxDQUFDO1lBQ2QsT0FBTztnQkFDTCxNQUFNTztZQUNSO1FBQ0Y7UUFFQSxzQkFBc0I7UUFDdEIsTUFBTUQsR0FBR1MsVUFBVSxDQUFDLGlCQUFpQkMsV0FBVyxDQUM5QztZQUFFQyxhQUFhO1FBQUUsR0FDakI7WUFBRUMsUUFBUTtRQUFLO1FBRWpCbkIsUUFBUUMsR0FBRyxDQUFDO1FBRVosTUFBTU0sR0FBR1MsVUFBVSxDQUFDLGlCQUFpQkMsV0FBVyxDQUFDO1lBQUVHLFdBQVc7UUFBRTtRQUNoRXBCLFFBQVFDLEdBQUcsQ0FBQztRQUVaLE1BQU1NLEdBQUdTLFVBQVUsQ0FBQyxpQkFBaUJDLFdBQVcsQ0FBQztZQUFFSSxRQUFRO1FBQUU7UUFDN0RyQixRQUFRQyxHQUFHLENBQUM7UUFFWixzQkFBc0I7UUFDdEIsSUFBSTtZQUNGLE1BQU1NLEdBQUdPLGdCQUFnQixDQUFDO1lBQzFCZCxRQUFRQyxHQUFHLENBQUM7UUFDZCxFQUFFLE9BQU9PLE9BQVk7WUFDbkIsSUFBSUEsTUFBTU8sSUFBSSxLQUFLLElBQUk7Z0JBQ3JCZixRQUFRQyxHQUFHLENBQUM7WUFDZCxPQUFPO2dCQUNMLE1BQU1PO1lBQ1I7UUFDRjtRQUVBLGtCQUFrQjtRQUNsQixNQUFNRCxHQUFHUyxVQUFVLENBQUMsYUFBYUMsV0FBVyxDQUFDO1lBQUVDLGFBQWE7UUFBRTtRQUM5RGxCLFFBQVFDLEdBQUcsQ0FBQztRQUVaLE1BQU1NLEdBQUdTLFVBQVUsQ0FBQyxhQUFhQyxXQUFXLENBQUM7WUFBRUssV0FBVztRQUFFO1FBQzVEdEIsUUFBUUMsR0FBRyxDQUFDO1FBRVosb0JBQW9CO1FBQ3BCLElBQUk7WUFDRixNQUFNTSxHQUFHTyxnQkFBZ0IsQ0FBQztZQUMxQmQsUUFBUUMsR0FBRyxDQUFDO1FBQ2QsRUFBRSxPQUFPTyxPQUFZO1lBQ25CLElBQUlBLE1BQU1PLElBQUksS0FBSyxJQUFJO2dCQUNyQmYsUUFBUUMsR0FBRyxDQUFDO1lBQ2QsT0FBTztnQkFDTCxNQUFNTztZQUNSO1FBQ0Y7UUFFQSxvQkFBb0I7UUFDcEIsTUFBTUQsR0FBR1MsVUFBVSxDQUFDLGVBQWVDLFdBQVcsQ0FBQztZQUFFTSxXQUFXO1FBQUUsR0FBRztZQUFFSixRQUFRO1FBQUs7UUFDaEZuQixRQUFRQyxHQUFHLENBQUM7UUFFWixNQUFNTSxHQUFHUyxVQUFVLENBQUMsZUFBZUMsV0FBVyxDQUFDO1lBQUVDLGFBQWE7UUFBRTtRQUNoRWxCLFFBQVFDLEdBQUcsQ0FBQztRQUVaLE1BQU1NLEdBQUdTLFVBQVUsQ0FBQyxlQUFlQyxXQUFXLENBQUM7WUFBRU8sV0FBVztRQUFFO1FBQzlEeEIsUUFBUUMsR0FBRyxDQUFDO1FBRVosTUFBTU0sR0FBR1MsVUFBVSxDQUFDLGVBQWVDLFdBQVcsQ0FBQztZQUFFUSxXQUFXO1FBQUU7UUFDOUR6QixRQUFRQyxHQUFHLENBQUM7UUFFWiw0QkFBNEI7UUFDNUIsSUFBSTtZQUNGLE1BQU1NLEdBQUdPLGdCQUFnQixDQUFDO1lBQzFCZCxRQUFRQyxHQUFHLENBQUM7UUFDZCxFQUFFLE9BQU9PLE9BQVk7WUFDbkIsSUFBSUEsTUFBTU8sSUFBSSxLQUFLLElBQUk7Z0JBQ3JCZixRQUFRQyxHQUFHLENBQUM7WUFDZCxPQUFPO2dCQUNMLE1BQU1PO1lBQ1I7UUFDRjtRQUVBLDRCQUE0QjtRQUM1QixNQUFNRCxHQUFHUyxVQUFVLENBQUMsdUJBQXVCQyxXQUFXLENBQUM7WUFBRVMsY0FBYztRQUFFLEdBQUc7WUFBRVAsUUFBUTtRQUFLO1FBQzNGbkIsUUFBUUMsR0FBRyxDQUFDO1FBRVosTUFBTU0sR0FBR1MsVUFBVSxDQUFDLHVCQUF1QkMsV0FBVyxDQUFDO1lBQUVDLGFBQWE7UUFBRTtRQUN4RWxCLFFBQVFDLEdBQUcsQ0FBQztRQUVaLE1BQU1NLEdBQUdTLFVBQVUsQ0FBQyx1QkFBdUJDLFdBQVcsQ0FBQztZQUFFVSxpQkFBaUI7UUFBRTtRQUM1RTNCLFFBQVFDLEdBQUcsQ0FBQztRQUVaLE1BQU1NLEdBQUdTLFVBQVUsQ0FBQyx1QkFBdUJDLFdBQVcsQ0FBQztZQUFFUSxXQUFXO1FBQUU7UUFDdEV6QixRQUFRQyxHQUFHLENBQUM7UUFFWixNQUFNTSxHQUFHUyxVQUFVLENBQUMsdUJBQXVCQyxXQUFXLENBQUM7WUFBRUksUUFBUTtRQUFFO1FBQ25FckIsUUFBUUMsR0FBRyxDQUFDO1FBRVpELFFBQVFDLEdBQUcsQ0FBQztJQUNkLEVBQUUsT0FBT08sT0FBTztRQUNkUixRQUFRUSxLQUFLLENBQUMsb0JBQW9CQTtRQUNsQyxNQUFNQTtJQUNSO0FBQ0Y7QUFFQTs7O0NBR0MsR0FDTSxlQUFlb0I7SUFDcEIsSUFBSTtRQUNGLE1BQU1yQixLQUFLLE1BQU1SO1FBQ2pCLE1BQU04QixNQUFNQyxLQUFLQyxLQUFLLENBQUNDLEtBQUtILEdBQUcsS0FBSztRQUVwQyxNQUFNSSxTQUFTLE1BQU0xQixHQUFHUyxVQUFVLENBQUMsaUJBQWlCa0IsVUFBVSxDQUFDO1lBQzdEZCxXQUFXO2dCQUFFZSxLQUFLTjtZQUFJO1lBQ3RCUixRQUFRO1FBQ1Y7UUFFQXJCLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLGNBQWMsRUFBRWdDLE9BQU9HLFlBQVksQ0FBQyxRQUFRLENBQUM7UUFDMUQsT0FBT0gsT0FBT0csWUFBWTtJQUM1QixFQUFFLE9BQU81QixPQUFPO1FBQ2RSLFFBQVFRLEtBQUssQ0FBQyx1QkFBdUJBO1FBQ3JDLE1BQU1BO0lBQ1I7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL0BnYW1lLWFpL3NlcnZlci8uL2xpYi9tb25nb2RiLnRzPzA1YmQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNb25nb0RCIOi/nuaOpeeuoeeQhuaooeWdl1xuICog5L2/55So5Y2V5L6L5qih5byP57yT5a2Y6L+e5o6l77yM6YG/5YWN5q+P5qyh6YeN5aSN6L+e5o6lXG4gKi9cblxuaW1wb3J0IHsgTW9uZ29DbGllbnQsIERiIH0gZnJvbSAnbW9uZ29kYidcblxuY29uc3QgTU9OR09EQl9VUkkgPSBwcm9jZXNzLmVudi5NT05HT0RCX1VSSSB8fCAnbW9uZ29kYjovL2xvY2FsaG9zdDoyNzAxNydcbmNvbnN0IE1PTkdPREJfREJfTkFNRSA9IHByb2Nlc3MuZW52Lk1PTkdPREJfREJfTkFNRSB8fCAnZ2FtZS1haSdcblxuLyoqXG4gKiDnvJPlrZjnmoTov57mjqXlrp7kvotcbiAqL1xubGV0IGNhY2hlZENsaWVudDogTW9uZ29DbGllbnQgfCBudWxsID0gbnVsbFxubGV0IGNhY2hlZERiOiBEYiB8IG51bGwgPSBudWxsXG5cbi8qKlxuICog6L+e5o6l5YiwIE1vbmdvREJcbiAqIOS9v+eUqOWNleS+i+aooeW8j+ehruS/neWPquWIm+W7uuS4gOS4qui/nuaOpVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29ubmVjdERCKCk6IFByb21pc2U8RGI+IHtcbiAgLy8g5aaC5p6c5bey5pyJ6L+e5o6l77yM55u05o6l6L+U5ZueXG4gIGlmIChjYWNoZWRDbGllbnQgJiYgY2FjaGVkRGIpIHtcbiAgICBjb25zb2xlLmxvZygnW01vbmdvREJdIOS9v+eUqOe8k+WtmOi/nuaOpScpXG4gICAgcmV0dXJuIGNhY2hlZERiXG4gIH1cblxuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCdbTW9uZ29EQl0g5q2j5Zyo6L+e5o6lLi4uJylcblxuICAgIGNvbnN0IGNsaWVudCA9IG5ldyBNb25nb0NsaWVudChNT05HT0RCX1VSSSEsIHtcbiAgICAgIG1heFBvb2xTaXplOiAxMCxcbiAgICAgIG1pblBvb2xTaXplOiAyLFxuICAgICAgbWF4SWRsZVRpbWVNUzogNjAwMDAsXG4gICAgfSlcblxuICAgIGF3YWl0IGNsaWVudC5jb25uZWN0KClcbiAgICBjb25zb2xlLmxvZygnW01vbmdvREJdIOi/nuaOpeaIkOWKnycpXG5cbiAgICAvLyDojrflj5bmlbDmja7lupPlrp7kvotcbiAgICBjb25zdCBkYiA9IGNsaWVudC5kYihNT05HT0RCX0RCX05BTUUpXG5cbiAgICAvLyDnvJPlrZjov57mjqXlkozmlbDmja7lupPlrp7kvotcbiAgICBjYWNoZWRDbGllbnQgPSBjbGllbnRcbiAgICBjYWNoZWREYiA9IGRiXG5cbiAgICByZXR1cm4gZGJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbTW9uZ29EQl0g6L+e5o6l5aSx6LSlOicsIGVycm9yKVxuICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuLyoqXG4gKiDlhbPpl60gTW9uZ29EQiDov57mjqVcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsb3NlREIoKTogUHJvbWlzZTx2b2lkPiB7XG4gIGlmIChjYWNoZWRDbGllbnQpIHtcbiAgICBhd2FpdCBjYWNoZWRDbGllbnQuY2xvc2UoKVxuICAgIGNhY2hlZENsaWVudCA9IG51bGxcbiAgICBjYWNoZWREYiA9IG51bGxcbiAgICBjb25zb2xlLmxvZygnW01vbmdvREJdIOi/nuaOpeW3suWFs+mXrScpXG4gIH1cbn1cblxuLyoqXG4gKiDojrflj5blvZPliY3mlbDmja7lupPlrp7kvotcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERCKCk6IERiIHtcbiAgaWYgKCFjYWNoZWREYikge1xuICAgIHRocm93IG5ldyBFcnJvcignRGF0YWJhc2Ugbm90IGNvbm5lY3RlZC4gQ2FsbCBjb25uZWN0REIoKSBmaXJzdC4nKVxuICB9XG4gIHJldHVybiBjYWNoZWREYlxufVxuXG4vKipcbiAqIOWIm+W7uuW/heimgeeahOmbhuWQiOWSjOe0ouW8lVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZURhdGFiYXNlKCk6IFByb21pc2U8dm9pZD4ge1xuICB0cnkge1xuICAgIGNvbnN0IGRiID0gYXdhaXQgY29ubmVjdERCKClcblxuICAgIGNvbnNvbGUubG9nKCdbTW9uZ29EQl0g5Yid5aeL5YyW5pWw5o2u5bqTLi4uJylcblxuICAgIC8vIOWIm+W7uiBzdWJzY3JpcHRpb25zIOmbhuWQiFxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBkYi5jcmVhdGVDb2xsZWN0aW9uKCdzdWJzY3JpcHRpb25zJylcbiAgICAgIGNvbnNvbGUubG9nKCdbTW9uZ29EQl0gc3Vic2NyaXB0aW9ucyDpm4blkIjlt7LliJvlu7onKVxuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGlmIChlcnJvci5jb2RlID09PSA0OCkge1xuICAgICAgICAvLyDpm4blkIjlt7LlrZjlnKhcbiAgICAgICAgY29uc29sZS5sb2coJ1tNb25nb0RCXSBzdWJzY3JpcHRpb25zIOmbhuWQiOW3suWtmOWcqCcpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIOWIm+W7uiBzdWJzY3JpcHRpb25zIOe0ouW8lVxuICAgIGF3YWl0IGRiLmNvbGxlY3Rpb24oJ3N1YnNjcmlwdGlvbnMnKS5jcmVhdGVJbmRleChcbiAgICAgIHsgdXNlckFkZHJlc3M6IDEgfSxcbiAgICAgIHsgdW5pcXVlOiB0cnVlIH1cbiAgICApXG4gICAgY29uc29sZS5sb2coJ1tNb25nb0RCXSBzdWJzY3JpcHRpb25zLnVzZXJBZGRyZXNzIOWUr+S4gOe0ouW8leW3suWIm+W7uicpXG5cbiAgICBhd2FpdCBkYi5jb2xsZWN0aW9uKCdzdWJzY3JpcHRpb25zJykuY3JlYXRlSW5kZXgoeyBleHBpcmVzQXQ6IDEgfSlcbiAgICBjb25zb2xlLmxvZygnW01vbmdvREJdIHN1YnNjcmlwdGlvbnMuZXhwaXJlc0F0IOe0ouW8leW3suWIm+W7uicpXG5cbiAgICBhd2FpdCBkYi5jb2xsZWN0aW9uKCdzdWJzY3JpcHRpb25zJykuY3JlYXRlSW5kZXgoeyBzdGF0dXM6IDEgfSlcbiAgICBjb25zb2xlLmxvZygnW01vbmdvREJdIHN1YnNjcmlwdGlvbnMuc3RhdHVzIOe0ouW8leW3suWIm+W7uicpXG5cbiAgICAvLyDliJvlu7ogY2hhdF9sb2dzIOmbhuWQiO+8iOWPr+mAie+8iVxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBkYi5jcmVhdGVDb2xsZWN0aW9uKCdjaGF0X2xvZ3MnKVxuICAgICAgY29uc29sZS5sb2coJ1tNb25nb0RCXSBjaGF0X2xvZ3Mg6ZuG5ZCI5bey5Yib5bu6JylcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBpZiAoZXJyb3IuY29kZSA9PT0gNDgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tNb25nb0RCXSBjaGF0X2xvZ3Mg6ZuG5ZCI5bey5a2Y5ZyoJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGVycm9yXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8g5Yib5bu6IGNoYXRfbG9ncyDntKLlvJVcbiAgICBhd2FpdCBkYi5jb2xsZWN0aW9uKCdjaGF0X2xvZ3MnKS5jcmVhdGVJbmRleCh7IHVzZXJBZGRyZXNzOiAxIH0pXG4gICAgY29uc29sZS5sb2coJ1tNb25nb0RCXSBjaGF0X2xvZ3MudXNlckFkZHJlc3Mg57Si5byV5bey5Yib5bu6JylcblxuICAgIGF3YWl0IGRiLmNvbGxlY3Rpb24oJ2NoYXRfbG9ncycpLmNyZWF0ZUluZGV4KHsgdGltZXN0YW1wOiAxIH0pXG4gICAgY29uc29sZS5sb2coJ1tNb25nb0RCXSBjaGF0X2xvZ3MudGltZXN0YW1wIOe0ouW8leW3suWIm+W7uicpXG5cbiAgICAvLyDliJvlu7ogZ2FtZUNvbnRlbnQg6ZuG5ZCIXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGRiLmNyZWF0ZUNvbGxlY3Rpb24oJ2dhbWVDb250ZW50JylcbiAgICAgIGNvbnNvbGUubG9nKCdbTW9uZ29EQl0gZ2FtZUNvbnRlbnQg6ZuG5ZCI5bey5Yib5bu6JylcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBpZiAoZXJyb3IuY29kZSA9PT0gNDgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tNb25nb0RCXSBnYW1lQ29udGVudCDpm4blkIjlt7LlrZjlnKgnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXJyb3JcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDliJvlu7ogZ2FtZUNvbnRlbnQg57Si5byVXG4gICAgYXdhaXQgZGIuY29sbGVjdGlvbignZ2FtZUNvbnRlbnQnKS5jcmVhdGVJbmRleCh7IGNvbnRlbnRJZDogMSB9LCB7IHVuaXF1ZTogdHJ1ZSB9KVxuICAgIGNvbnNvbGUubG9nKCdbTW9uZ29EQl0gZ2FtZUNvbnRlbnQuY29udGVudElkIOWUr+S4gOe0ouW8leW3suWIm+W7uicpXG5cbiAgICBhd2FpdCBkYi5jb2xsZWN0aW9uKCdnYW1lQ29udGVudCcpLmNyZWF0ZUluZGV4KHsgdXNlckFkZHJlc3M6IDEgfSlcbiAgICBjb25zb2xlLmxvZygnW01vbmdvREJdIGdhbWVDb250ZW50LnVzZXJBZGRyZXNzIOe0ouW8leW3suWIm+W7uicpXG5cbiAgICBhd2FpdCBkYi5jb2xsZWN0aW9uKCdnYW1lQ29udGVudCcpLmNyZWF0ZUluZGV4KHsgZ2FtZVRpdGxlOiAxIH0pXG4gICAgY29uc29sZS5sb2coJ1tNb25nb0RCXSBnYW1lQ29udGVudC5nYW1lVGl0bGUg57Si5byV5bey5Yib5bu6JylcblxuICAgIGF3YWl0IGRiLmNvbGxlY3Rpb24oJ2dhbWVDb250ZW50JykuY3JlYXRlSW5kZXgoeyBjcmVhdGVkQXQ6IDEgfSlcbiAgICBjb25zb2xlLmxvZygnW01vbmdvREJdIGdhbWVDb250ZW50LmNyZWF0ZWRBdCDntKLlvJXlt7LliJvlu7onKVxuXG4gICAgLy8g5Yib5bu6IGRpdmlkZW5kV2l0aGRyYXdhbHMg6ZuG5ZCIXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGRiLmNyZWF0ZUNvbGxlY3Rpb24oJ2RpdmlkZW5kV2l0aGRyYXdhbHMnKVxuICAgICAgY29uc29sZS5sb2coJ1tNb25nb0RCXSBkaXZpZGVuZFdpdGhkcmF3YWxzIOmbhuWQiOW3suWIm+W7uicpXG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgaWYgKGVycm9yLmNvZGUgPT09IDQ4KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbTW9uZ29EQl0gZGl2aWRlbmRXaXRoZHJhd2FscyDpm4blkIjlt7LlrZjlnKgnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXJyb3JcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDliJvlu7ogZGl2aWRlbmRXaXRoZHJhd2FscyDntKLlvJVcbiAgICBhd2FpdCBkYi5jb2xsZWN0aW9uKCdkaXZpZGVuZFdpdGhkcmF3YWxzJykuY3JlYXRlSW5kZXgoeyB3aXRoZHJhd2FsSWQ6IDEgfSwgeyB1bmlxdWU6IHRydWUgfSlcbiAgICBjb25zb2xlLmxvZygnW01vbmdvREJdIGRpdmlkZW5kV2l0aGRyYXdhbHMud2l0aGRyYXdhbElkIOWUr+S4gOe0ouW8leW3suWIm+W7uicpXG5cbiAgICBhd2FpdCBkYi5jb2xsZWN0aW9uKCdkaXZpZGVuZFdpdGhkcmF3YWxzJykuY3JlYXRlSW5kZXgoeyB1c2VyQWRkcmVzczogMSB9KVxuICAgIGNvbnNvbGUubG9nKCdbTW9uZ29EQl0gZGl2aWRlbmRXaXRoZHJhd2Fscy51c2VyQWRkcmVzcyDntKLlvJXlt7LliJvlu7onKVxuXG4gICAgYXdhaXQgZGIuY29sbGVjdGlvbignZGl2aWRlbmRXaXRoZHJhd2FscycpLmNyZWF0ZUluZGV4KHsgdHJhbnNhY3Rpb25IYXNoOiAxIH0pXG4gICAgY29uc29sZS5sb2coJ1tNb25nb0RCXSBkaXZpZGVuZFdpdGhkcmF3YWxzLnRyYW5zYWN0aW9uSGFzaCDntKLlvJXlt7LliJvlu7onKVxuXG4gICAgYXdhaXQgZGIuY29sbGVjdGlvbignZGl2aWRlbmRXaXRoZHJhd2FscycpLmNyZWF0ZUluZGV4KHsgY3JlYXRlZEF0OiAxIH0pXG4gICAgY29uc29sZS5sb2coJ1tNb25nb0RCXSBkaXZpZGVuZFdpdGhkcmF3YWxzLmNyZWF0ZWRBdCDntKLlvJXlt7LliJvlu7onKVxuXG4gICAgYXdhaXQgZGIuY29sbGVjdGlvbignZGl2aWRlbmRXaXRoZHJhd2FscycpLmNyZWF0ZUluZGV4KHsgc3RhdHVzOiAxIH0pXG4gICAgY29uc29sZS5sb2coJ1tNb25nb0RCXSBkaXZpZGVuZFdpdGhkcmF3YWxzLnN0YXR1cyDntKLlvJXlt7LliJvlu7onKVxuXG4gICAgY29uc29sZS5sb2coJ1tNb25nb0RCXSDmlbDmja7lupPliJ3lp4vljJblrozmiJAnKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1tNb25nb0RCXSDliJ3lp4vljJblpLHotKU6JywgZXJyb3IpXG4gICAgdGhyb3cgZXJyb3JcbiAgfVxufVxuXG4vKipcbiAqIOa4heeQhui/h+acn+eahOiuoumYhVxuICog5a6a5pyf6LCD55So5q2k5Ye95pWw5Yig6Zmk5bey6L+H5pyf55qE6K6i6ZiF6K6w5b2VXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGVhbnVwRXhwaXJlZFN1YnNjcmlwdGlvbnMoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBkYiA9IGF3YWl0IGNvbm5lY3REQigpXG4gICAgY29uc3Qgbm93ID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMClcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oJ3N1YnNjcmlwdGlvbnMnKS5kZWxldGVNYW55KHtcbiAgICAgIGV4cGlyZXNBdDogeyAkbHQ6IG5vdyB9LFxuICAgICAgc3RhdHVzOiAnaW5hY3RpdmUnLFxuICAgIH0pXG5cbiAgICBjb25zb2xlLmxvZyhgW01vbmdvREJdIOW3sua4heeQhiAke3Jlc3VsdC5kZWxldGVkQ291bnR9IOadoei/h+acn+iuoumYheiusOW9lWApXG4gICAgcmV0dXJuIHJlc3VsdC5kZWxldGVkQ291bnRcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbTW9uZ29EQl0g5riF55CG6L+H5pyf6K6i6ZiF5aSx6LSlOicsIGVycm9yKVxuICAgIHRocm93IGVycm9yXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJNb25nb0NsaWVudCIsIk1PTkdPREJfVVJJIiwicHJvY2VzcyIsImVudiIsIk1PTkdPREJfREJfTkFNRSIsImNhY2hlZENsaWVudCIsImNhY2hlZERiIiwiY29ubmVjdERCIiwiY29uc29sZSIsImxvZyIsImNsaWVudCIsIm1heFBvb2xTaXplIiwibWluUG9vbFNpemUiLCJtYXhJZGxlVGltZU1TIiwiY29ubmVjdCIsImRiIiwiZXJyb3IiLCJjbG9zZURCIiwiY2xvc2UiLCJnZXREQiIsIkVycm9yIiwiaW5pdGlhbGl6ZURhdGFiYXNlIiwiY3JlYXRlQ29sbGVjdGlvbiIsImNvZGUiLCJjb2xsZWN0aW9uIiwiY3JlYXRlSW5kZXgiLCJ1c2VyQWRkcmVzcyIsInVuaXF1ZSIsImV4cGlyZXNBdCIsInN0YXR1cyIsInRpbWVzdGFtcCIsImNvbnRlbnRJZCIsImdhbWVUaXRsZSIsImNyZWF0ZWRBdCIsIndpdGhkcmF3YWxJZCIsInRyYW5zYWN0aW9uSGFzaCIsImNsZWFudXBFeHBpcmVkU3Vic2NyaXB0aW9ucyIsIm5vdyIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJyZXN1bHQiLCJkZWxldGVNYW55IiwiJGx0IiwiZGVsZXRlZENvdW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/mongodb.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@ethersproject","vendor-chunks/bn.js","vendor-chunks/aes-js","vendor-chunks/hash.js","vendor-chunks/js-sha3","vendor-chunks/scrypt-js","vendor-chunks/bech32","vendor-chunks/inherits","vendor-chunks/minimalistic-assert"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsubscription%2Factivate%2Froute&page=%2Fapi%2Fsubscription%2Factivate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsubscription%2Factivate%2Froute.ts&appDir=%2FUsers%2Fdaniel%2FCode%2F10_project%2FGame%2Fserver%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdaniel%2FCode%2F10_project%2FGame%2Fserver&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();